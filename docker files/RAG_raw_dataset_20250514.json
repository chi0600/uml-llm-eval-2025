[
    {
        "file_name": "0000 - gamma j_v10_Reference.txt",
        "input": "Requirements:\nRemove User\nGoal:\nRemove a user from the system.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks button or link to “Remove User\"\nBasic Scenario:\n1. Administrator clicks button or link to initiate the remove user process.\n2. System prompts the Administrator to select a user by searching or viewing a list of users.\n3. System displays user information.\n4. System confirms deletion of selected user.\n5. System displays account home page to Administrator.\nPostconditions:\nAn account has been deleted within the system.",
        "output": "@startuml\ntitle Remove User\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Remove User\"\nactivate System\nSystem -> Administrator : Prompt to select a user (search or list)\nAdministrator -> System : Select a user\nSystem -> Administrator : Display user information\nAdministrator -> System : Confirm deletion\nSystem -> System : Delete user account\nSystem -> Administrator : Display account home page\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v11_Reference.txt",
        "input": "Requirements:\nChange User Properties\nGoal:\nAlter properties such as passwords and privileges of the user.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks button or link to “Change User Properties\"\nBasic Scenario:\n1. Administrator clicks the button or link to initiate change user properties process.\n2. System prompts the Administrator to select a user by searching or viewing a list of users.\n3. System displays the user information.\n4. System alters the user properties.\n5. System displays the account home page to Administrator.\nPostconditions:\nAn account has been altered within the system.",
        "output": "@startuml\ntitle Change User Properties\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Change User Properties\"\nactivate System\nSystem -> Administrator : Prompt to select a user (search or list)\nAdministrator -> System : Select a user\nSystem -> Administrator : Display user information\nAdministrator -> System : Modify user properties\nSystem -> System : Update user properties in the system\nSystem -> Administrator : Display account home page\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v12_Reference.txt",
        "input": "Requirements:\nInstall Plug-ins\nGoal:\nInstall a new plug-in to the application.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks the button or link to \"Install Plug-ins \"\nBasic Scenario:\n1. Administrator clicks the button or link to initiate Plug-in installation process.\n2. System prompts the Administrator to upload the Plug-in module.\n3. System installs plug-in and validates changes.\n4. System displays plug-in options to the Administrator.\nPostconditions:\nA new plug-in is installed in the application.",
        "output": "@startuml\ntitle Install Plug-ins\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Install Plug-ins\"\nactivate System\nSystem -> Administrator : Prompt to upload Plug-in module\nAdministrator -> System : Upload Plug-in module\nSystem -> System : Install and validate Plug-in\nSystem -> Administrator : Display Plug-in options\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v13_Reference.txt",
        "input": "Requirements:\nRemove Plug-ins\nGoal:\nRemove a plug-in from the application.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks the button or link to \"Install Plug-ins \"\nBasic Scenario:\n1. Administrator clicks the button or link to initiate Plug-in deletion process.\n2. System prompts the Administrator to select the desired Plug-in module.\n3. System removes the plug-in and validates changes.\nPostconditions:\nA plug-in is removed from the application.",
        "output": "@startuml\ntitle Remove Plug-ins\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Remove Plug-ins\"\nactivate System\nSystem -> Administrator : Prompt to select Plug-in module\nAdministrator -> System : Select Plug-in module\nSystem -> System : Remove and validate Plug-in\nSystem -> Administrator : Confirm removal to Administrator\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v14_Reference.txt",
        "input": "Requirements:\nManage Plug-in Options\nGoal:\nMake changes to an installed plug-in.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks button or link to \"Manage Plug-ins \"\nBasic Scenario:\n1. Administrator clicks the button or link to initiate Plug-in Options process.\n2. System prompts the Administrator to select the desired Plug-in module.\n3. System displays all plug-in options to the Administrator.\n4. System confirms changes with the Administrator.\nPostconditions:\nA plug-in’s options have successfully been changed.",
        "output": "@startuml\ntitle Manage Plug-in Options\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Manage Plug-ins\"\nactivate System\nSystem -> Administrator : Prompt to select Plug-in module\nAdministrator -> System : Select Plug-in module\nSystem -> Administrator : Display Plug-in options\nAdministrator -> System : Make changes to Plug-in options\nSystem -> System : Apply changes\nSystem -> Administrator : Confirm changes\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v15_Reference.txt",
        "input": "Requirements:\nInstall patch process\nGoal:\nInstall patches or software updates to the web store.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks the button or link to \"Install Patch\"\nBasic Scenario:\n1. Administrator clicks the button or link to initiate Patching process.\n2. System prompts the Administrator to upload the patch.\n3. System automatically installs patches and reinitializes software.\n4. System confirms that patch has been successfully installed.\nPostconditions:\nThe web store was successfully updated.",
        "output": "@startuml\ntitle Install Patch Process\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Install Patch\"\nactivate System\nSystem -> Administrator : Prompt to upload patch\nAdministrator -> System : Upload patch\nSystem -> System : Install patch and reinitialize software\nSystem -> Administrator : Confirm successful installation\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v16_Reference.txt",
        "input": "Requirements:\nLogin Sales Person\nGoal:\nLogin to an account with the system.\nActors:\nSales Person\nWeborder System\nPreconditions:\nSales Person account must already be registered.\nTriggers:\nSales Person clicks button or link to \"Login\"\nBasic Scenario:\n1. Sales Person clicks the button or link to initiate login process.\n2. System prompts the Sales Person for email and password.\n3. System verifies the information.\n4. System creates session cookie.\n5. System displays the account home page to Sales Person\nAlternative Scenario:\nA1. System recognizes Sales Person's cookie\nA2. Go to Step 5 (Basic Scenario).\nB1. Sales Person enters incorrect login information.\nB2. System prompts the Sales Person to resend login details to email account.\nB3. Sales Person confirms.\nB4. System sends email to registered email address.\nB5. Go to Step 1 (Basic Scenario).\nPostconditions:\nThe Sales Person is logged into the system.",
        "output": "@startuml\ntitle Login Sales Person\n\nactor SalesPerson\nparticipant \"Weborder System\" as System\n\nSalesPerson -> System : Click \"Login\"\nactivate System\nalt Recognizes cookie\n    System -> SalesPerson : Display account home page\nelse Requires login details\n    System -> SalesPerson : Prompt for email and password\n    SalesPerson -> System : Enter email and password\n    alt Information verified\n        System -> System : Create session cookie\n        System -> SalesPerson : Display account home page\n    else Incorrect login details\n        System -> SalesPerson : Prompt to resend login details to email\n        SalesPerson -> System : Confirm resend\n        System -> SalesPerson : Send email to registered email address\n        System -> SalesPerson : Click \"Login\" and start again login process\n    end\nend\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v17_Reference.txt",
        "input": "Requirements:\nLogout Sales Person\nGoal:\nLogout the Sales Person account on the system.\nActors:\nSales Person\nWeborder System\nPreconditions:\nSales Person must be logged-in on the system.\nTriggers:\nSales Person clicks the button or link to \"Logout\"\nBasic Scenario:\n1. Sales Person clicks the button or link to initiate logout process.\n2. System terminates the session cookie.\n3. System displays home page.\nAlternative Scenario:\nNone\nPostconditions:\nThe Sales Person is logged out of the system.",
        "output": "@startuml\ntitle Logout Sales Person\n\nactor SalesPerson\nparticipant \"Weborder System\" as System\n\nSalesPerson -> System : Click \"Logout\"\nactivate System\nSystem -> System : Terminate session cookie\nSystem -> SalesPerson : Display home page\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v18_Reference.txt",
        "input": "Requirements:\nAdd Product\nGoal:\nAdd a product to the system.\nActors:\nSales Person\nWeborder System\nPreconditions:\nSales Person must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nSales Person clicks the button or link to \"Add Product\"\nBasic Scenario:\n1. Sales Person clicks the button or link to initiate Add Product process.\n2. System prompts the Sales Person to fill out product name, product id, product\ndescription, product price, upload a product image, number of items in inventory, and\navailability of product.\n3. System validates the new product information.\n4. System creates a new product page for the new product.\n5. System displays the newly created product page.\nPostconditions:\nA new product is created within the system.",
        "output": "@startuml\ntitle Add Product\n\nactor SalesPerson\nparticipant \"Weborder System\" as System\n\nSalesPerson -> System : Click \"Add Product\"\nactivate System\nSystem -> SalesPerson : Prompt to fill out product details\nSalesPerson -> System : Provide product name, id, description, price, image, inventory, and availability\nSystem -> System : Validate product information\nSystem -> System : Create new product page\nSystem -> SalesPerson : Display newly created product page\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v19_Reference.txt",
        "input": "Requirements:\nRemove Product\nGoal:\nRemove a product from the system.\nActors:\nSales Person\nWeborder System\nPreconditions:\nSales Person must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nSales Person clicks the button or link to \"Remove Product\"\nBasic Scenario:\n1. Sales Person clicks the button or link to initiate Remove Product process.\n2. System prompts the Sales Person to select a product by searching or viewing a list of\nproducts.\n3. System validates the product information.\n4. System removes the product page and product information from the system.\n5. System displays the newly created product page.\nPostconditions:\nA product is deleted from the system.",
        "output": "@startuml\ntitle Remove Product\n\nactor SalesPerson\nparticipant \"Weborder System\" as System\n\nSalesPerson -> System : Click \"Remove Product\"\nactivate System\nSystem -> SalesPerson : Prompt to select a product (search or list)\nSalesPerson -> System : Select a product\nSystem -> System : Validate product information\nSystem -> System : Remove product page and information\nSystem -> SalesPerson : Display confirmation or updated product page\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v1_Reference.txt",
        "input": "Requirements:\nRegister Customer\nGoal:\nRegister a new customer account with the system.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer must be able to access the web order system via a web browser with HTTPS.\nTriggers:\nCustomer clicks button or link to \"Register\"\nBasic Scenario:\n1. Customer first clicks on the button or link to initiate registration process.\n2. System prompts the customer to fill out his/her first name, last name, billing address,\nshipping address, email address, and their password.\n3. Customer enters fields.\n4. System validates the customer's information.\n5. System creates a new account for the Customer.\n6. System creates a session cookie.\n7. System displays an account home page to Customer.\nAlternative Scenario:\nA1. System recognizes Customer's cookie.\nA2. Go to Step 7 (Basic Scenario).\nPostconditions:\nThe Customer registers and creates a new customer account with the system.",
        "output": "@startuml\ntitle Customer Registration Process\n\nactor Customer\nparticipant \"Weborder System\" as WeborderSystem\n\nCustomer -> WeborderSystem : Click \"Register\"\nactivate WeborderSystem\nWeborderSystem -> Customer : Prompt for registration details\ndeactivate WeborderSystem\n\nCustomer -> WeborderSystem : Enter details (name, address, email, password)\nactivate WeborderSystem\n\nalt Valid information\n    WeborderSystem -> WeborderSystem : Validate information\n    WeborderSystem -> WeborderSystem : Create new account\n    WeborderSystem -> WeborderSystem : Create session cookie\n    WeborderSystem -> Customer : Display account home page\nelse Recognized cookie\n    WeborderSystem -> Customer : Display account home page\nend\ndeactivate WeborderSystem\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v20_Reference.txt",
        "input": "Requirements:\nUpdate Product Attributes\nGoal:\nUpdate Product attributes within the system.\nActors:\nSales Person\nWeborder System\nPreconditions:\nSales Person must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nSales Person clicks the button or link to \"Update Product Attributes\"\nBasic Scenario:\n1. Sales Person clicks the button or link to initiate Update Product Attributes process.\n2. System prompts the Sales Person to select a product by searching or viewing a list of products.\n3. System displays all of the product attributes and allows Sales Person to update the product name, product id, product description, product price, update the product\nimage, product availability, and/or the number of items in the inventory.\n4. System validates the product information.\n5. System updates the product page and product information within the system.\n6. System displays the newly updated product page.\nPostconditions:\nThe product attributes have been changed.",
        "output": "@startuml\ntitle Update Product Attributes\n\nactor SalesPerson\nparticipant \"Weborder System\" as System\n\nSalesPerson -> System : Click \"Update Product Attributes\"\nactivate System\nSystem -> SalesPerson : Prompt to select a product (search or list)\nSalesPerson -> System : Select a product\nSystem -> SalesPerson : Display product attributes\nSalesPerson -> System : Update product name, id, description, price, image, availability, or inventory\nSystem -> System : Validate product information\nSystem -> System : Update product page and information\nSystem -> SalesPerson : Display newly updated product page\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v21_Reference.txt",
        "input": "Requirements:\nRegister Customer\nGoal:\nRegister a new customer account with the system.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nCustomer clicks the button or link to \"Register\"\nBasic Scenario:\n1. Customer clicks the button or link to initiate registration process.\n2. System prompts the customer to fill out first name, last name, billing address, shipping\naddress, email address, and password.\n3. Customer enters fields.\n4. System validates customer's information.\n5. System creates a new account for the Customer.\n6. System creates session cookie.\n7. System displays account home page to Customer.\nAlternative Scenario:\nA1. System recognizes Customer's cookie.\nA2. Go to Step 7 (Basic Scenario).\nPostconditions:\nThe Customer registers and creates a new customer account with the system.",
        "output": "@startuml\ntitle Register Customer\n\nactor Customer\nparticipant \"Weborder System\" as System\n\nCustomer -> System : Click \"Register\"\nactivate System\nalt Recognizes customer's cookie\n    System -> Customer : Display account home page\nelse Requires registration\n    System -> Customer : Prompt to fill out registration fields (name, address, email, password)\n    Customer -> System : Enter registration fields\n    System -> System : Validate customer's information\n    System -> System : Create new account\n    System -> System : Create session cookie\n    System -> Customer : Display account home page\nend\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v22_Reference.txt",
        "input": "Requirements:\nLogin Customer\nGoal:\nLogin to a customer account with the system.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer account must already be registered.\nTriggers:\nCustomer clicks the button or link to \"Login\"\nBasic Scenario:\n1. Customer clicks the button or link to initiate login process.\n2. System prompts the customer for email and password.\n3. System verifies the information.\n4. System creates session cookie.\n5. System displays account home page to Customer\nAlternative Scenario:\nA1. System recognizes Customer's cookie\nA2. Go to Step 5 (Basic Scenario).\nB1. Customer enters incorrect login information.\nB2. System prompts Customer to resend login details to email account.\nB3. Customer confirms.\nB4. System sends email to registered email address.\nB5. Go to Step 1 (Basic Scenario).\nPostconditions:\nThe Customer is logged into the system.",
        "output": "@startuml\ntitle Login Customer\n\nactor Customer\nparticipant \"Weborder System\" as System\n\nCustomer -> System : Click \"Login\"\nactivate System\nalt Recognizes customer's cookie\n    System -> Customer : Display account home page\nelse Requires login details\n    System -> Customer : Prompt for email and password\n    Customer -> System : Enter email and password\n    alt Information verified\n        System -> System : Create session cookie\n        System -> Customer : Display account home page\n    else Incorrect login information\n        System -> Customer : Prompt to resend login details to email\n        Customer -> System : Confirm resend\n        System -> Customer : Send email to registered email address\n        System -> Customer : Click \"Login\" and start again login process\n    end\nend\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v23_Reference.txt",
        "input": "Requirements:\nEdit Customer Details\nGoal:\nEdit the customer account details.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer must be logged-in on the system.\nTriggers:\nCustomer clicks button or link to \"Edit Account\"\nBasic Scenario:\n1. Customer clicks button or link to initiate the process to edit the account.\n2. System displays account home page to Customer.\n3. Customer clicks button or link to edit the account details.\n4. System verifies the changes.\n5. System stores new account information.\nAlternative Scenario:\nNone\nPostcoditions:\nThe Customer has changed the account details.",
        "output": "@startuml\ntitle Edit Customer Details\n\nactor Customer\nparticipant \"Weborder System\" as System\n\nCustomer -> System : Click \"Edit Account\"\nactivate System\nSystem -> Customer : Display account home page\nCustomer -> System : Click to edit account details\nSystem -> System : Verify changes\nSystem -> System : Store new account information\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v24_Reference.txt",
        "input": "Requirements:\nLogout Customer\nGoal:\nLogout the customer account on the system.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer must be logged-in on the system.\nTriggers:\nCustomer clicks button or link to \"Logout\"\nBasic Scenario:\n1. Customer clicks button or link to initiate logout process.\n2. System terminates the session cookie.\n3. System displays home page.\nAlternative Scenario:\nNone\nPostconditions:\nThe Customer is logged out of the system.",
        "output": "@startuml\ntitle Logout Customer\n\nactor Customer\nparticipant \"Weborder System\" as System\n\nCustomer -> System : Click \"Logout\"\nactivate System\nSystem -> System : Terminate session cookie\nSystem -> Customer : Display home page\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v25_Reference.txt",
        "input": "Requirements:\nAdd Item To Cart\nGoal:\nCustomer adds item(s) in the cart\nActors:\nCustomer\nSystem\nPreconditions:\nThe customer must be logged-in on the system.\nTriggers:\nCustomer clicks button or link to \"Add To Cart\".\nBasic Scenario:\n1. Customer clicks the button or link to add to the cart with specified quantity.\n2. System adds the item(s) to the cart.\n3. System prompt Customer to edit quantity or remove item from cart.\n4. Customer confirms items in cart.\n5. System stores cookie with cart details.\n6. Customer returns to product listings.\nAlternative Scenario:\nA1. Customer terminates the web browser window after adding item(s) to cart.\nA2. Customer returns to weborder interface.\nA3. System recognizes cookie and goes to step 6 (Basic Scenario) with existing items in\ncart.\nPostconditions:\nThe Customer has added item(s) to the shopping cart.",
        "output": "@startuml\ntitle Add Item To Cart\n\nactor Customer\nparticipant \"System\" as System\n\nCustomer -> System : Click \"Add To Cart\" with specified quantity\nactivate System\nSystem -> System : Add item(s) to cart\nalt Nomral case\n    System -> Customer : Prompt to edit quantity or remove item\n    Customer -> System : Confirm items in cart\n    System -> System : Store cookie with cart details\nelse Customer terminates browser\n    Customer -> System : Terminate browser\n    Customer -> System : Reopen weborder interface\n    System -> System : Recognize cookie\nend\nCustomer -> System : Display product listings\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v26_Reference.txt",
        "input": "Requirements:\nCheckout An Order\nGoal:\nCustomer places and confirms an order for the checkout process.\nActors:\nCustomer\nWeborder System\nPreconditions:\n1. Customer must be logged-in on the system.\n2. Customer must have item(s) in the shopping cart.\nTriggers:\nCustomer clicks button or link to \"Ckeckout\"\nBasic Scenario:\n1. Customer clicks the button or link to initiate the checkout process.\n2. System calculates order of items in the shopping cart.\n3. System appends cookie with flag for checkout process.\n4. System presents customer with account details and payment methods.\n5. Customer confirms account details and payment methods.\n6. Customer confirms order.\n7. System stores order confirmation and order details.\n8. System sends email confirmation to the Customer.\n9. System appends cookie with flag for completed checkout process.\nAlternative Scenario:\nA1. Customer terminates order web browser during order the checkout process.\nA2. Customer returns to weborder interface.\nA3. System recognizes cookie and goes to step 4 (Basic Scenario).\nPostconditions:\nThe Customer has placed and confirmed an order.",
        "output": "@startuml\ntitle Checkout An Order\n\nactor Customer\nparticipant \"Weborder System\" as System\n\nCustomer -> System : Click \"Checkout\"\nactivate System\nSystem -> System : Calculate order of items in the cart\nSystem -> System : Append cookie with flag for checkout process\nSystem -> Customer : Present account details and payment methods\nalt Normal Scenario\n    Customer -> System : Confirm account details and payment methods\n    Customer -> System : Confirm order\n    System -> System : Store order confirmation and order details\n    System -> Customer : Send email confirmation\n    System -> System : Append cookie with flag for completed checkout process\nelse Customer terminates browser\n    Customer -> System : Terminate browser\n    Customer -> System : Reopen weborder interface\n    System -> System : Recognize cookie\n    System -> Customer : Present account details and payment methods\nend\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v2_Reference.txt",
        "input": "Requirements:\nLogin Customer\nGoal:\nLogin to a customer account with the system.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer account must already be registered.\nTriggers:\nCustomer clicks button or link to \"Login\"\nBasic Scenario:\n1. Customer clicks on the button or link to initiate the login process.\n2. System prompts the customer for his/her email and password.\n3. System verifies the information.\n4. System creates session cookie.\n5. System displays account home page to the Customer\nAlternative Scenario:\nA1. System recognizes the Customer's cookie\nA2. Go to Step 5 (Basic Scenario).\nB1. Customer enters incorrect login information.\nB2. System prompts the Customer to resend login details to the email account.\nB3. Customer confirms.\nB4. System sends an email to the registered email address.\nB5. Go to Step 1 (Basic Scenario).\nPostconditions:\nThe Customer is logged into the system.",
        "output": "@startuml\ntitle Customer Login Process\n\nactor Customer\nparticipant \"Weborder System\" as WeborderSystem\n\nCustomer -> WeborderSystem : Click \"Login\"\nactivate WeborderSystem\nWeborderSystem -> Customer : Prompt for email and password\ndeactivate WeborderSystem\n\nalt Cookie recognized\n    WeborderSystem -> Customer : Display account home page\n    activate WeborderSystem\nelse No cookie\n    Customer -> WeborderSystem : Enter email and password\n    WeborderSystem -> WeborderSystem : Verify information\n\n    alt Correct information\n        WeborderSystem -> WeborderSystem : Create session cookie\n        WeborderSystem -> Customer : Display account home page\n    else Incorrect information\n        WeborderSystem -> Customer : Prompt to resend login details\n        Customer -> WeborderSystem : Confirm resend\n        WeborderSystem -> WeborderSystem : Send email to registered address\n        WeborderSystem -> Customer : Prompt for email and password\n    end\nend\ndeactivate WeborderSystem\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v3_Reference.txt",
        "input": "Requirements:\nEdit Customer Details\nGoal:\nEdit the customer account details.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer must be logged-in on the system.\nTriggers:\nCustomer clicks on the button or link to \"Edit Account\"\nBasic Scenario:\n1. Customer clicks the button or link to initiate the process to edit the account.\n2. System displays the account home page to the Customer.\n3. Customer clicks the button or link in order to edit the account details.\n4. System verifies the changes.\n5. System stores new account information.\nAlternative Scenario:\nNone\nPostcoditions:\nThe Customer has changed the account details.",
        "output": "@startuml\ntitle Edit Customer Details\n\nactor Customer\nparticipant \"Weborder System\" as WeborderSystem\n\nCustomer -> WeborderSystem : Click \"Edit Account\"\nactivate WeborderSystem\nWeborderSystem -> Customer : Display account home page\ndeactivate WeborderSystem\n\nCustomer -> WeborderSystem : Click \"Edit Account Details\"\nactivate WeborderSystem\nWeborderSystem -> WeborderSystem : Verify changes\nWeborderSystem -> WeborderSystem : Store new account information\nWeborderSystem -> Customer : Confirmation message\n\ndeactivate WeborderSystem\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v4_Reference.txt",
        "input": "Requirements:\nLogout Customer\nGoal:\nLogout the customer account on the system.\nActors:\nCustomer\nWeborder System\nPreconditions:\nCustomer must be logged-in on the system.\nTriggers:\nCustomer clicks on the button or link to \"Logout\"\nBasic Scenario:\n1. Customer clicks the button or link in order to initiate logout process.\n2. System terminates the session cookie.\n3. System displays the home page.\nAlternative Scenario:\nNone\nPostconditions:\nThe Customer is logged out of the system.",
        "output": "@startuml\ntitle Customer Logout Process\n\nactor Customer\nparticipant \"Weborder System\" as WeborderSystem\n\nCustomer -> WeborderSystem : Clicks \"Logout\"\nactivate WeborderSystem\nWeborderSystem -> WeborderSystem : Terminate cookie\nWeborderSystem -> Customer : Display home page\ndeactivate WeborderSystem\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v5_Reference.txt",
        "input": "Requirements:\nAdd Item To Cart\nGoal:\nCustomer adds item(s) in the cart\nActors:\nCustomer\nSystem\nPreconditions:\nThe customer must be logged-in on the system.\nTriggers:\nCustomer clicks the button or link to \"Add To Cart\".\nBasic Scenario:\n1. Customer clicks the button or link in order to add to the cart with specified quantity.\n2. System adds the item(s) to the cart.\n3. System prompts the Customer to edit the quantity or remove the item from cart.\n4. Customer confirms the items in the cart.\n5. System stores cookie with cart details.\n6. Customer returns to product listings.\nAlternative Scenario:\nA1. Customer terminates the web browser window after adding item(s) to cart.\nA2. Customer returns to weborder interface.\nA3. System recognizes cookie and goes to step 6 (Basic Scenario) with existing items in cart.\nPostconditions:\nThe Customer has added item(s) to the shopping cart.",
        "output": "@startuml\ntitle Add Item To Cart\n\nactor Customer\nparticipant \"System\" as System\n\nCustomer -> System : Click \"Add To Cart\"\nactivate System\nSystem -> System : Add item(s) to cart\nSystem -> Customer : Prompt to edit quantity or remove item\ndeactivate System\n\nalt Customer confirms\n    Customer -> System : Confirm items\n    activate System\n    System -> System : Store cookie with cart details\n    System -> Customer : Return to product listings\n    deactivate System\nelse Customer terminates session\n    Customer -> System : Close browser window\n    activate System\n    System -> System : Recognize cookie\n    System -> Customer : Load existing items in cart\n    System -> Customer : Return to product listings\n    deactivate System\nend\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v6_Reference.txt",
        "input": "Requirements:\nCheckout An Order\nGoal:\nCustomer places and confirms an order for the checkout process.\nActors:\nCustomer\nWeborder System\nPreconditions:\n1. Customer must be logged-in on the system.\n2. Customer must have item(s) in the shopping cart.\nTriggers:\nCustomer clicks button or link to \"Ckeckout\"\nBasic Scenario:\n1. Customer clicks the button or link to initiate the checkout process.\n2. System calculates order of items in the shopping cart.\n3. System appends cookie with flag for checkout process.\n4. System presents the customer with the account details and payment methods.\n5. Customer confirms account details and payment methods.\n6. Customer confirms order.\n7. System stores order confirmation and order details.\n8. System sends email confirmation to the Customer.\n9. System appends cookie with flag for completed checkout process.\nAlternative Scenario:\nA1. Customer terminates order web browser during order the checkout process.\nA2. Customer returns to weborder interface.\nA3. System recognizes cookie and goes to step 4 (Basic Scenario).\nPostconditions:\nThe Customer has placed and confirmed an order.",
        "output": "@startuml\ntitle Checkout An Order\n\nactor Customer\nparticipant \"Weborder System\" as System\n\nCustomer -> System : Click \"Checkout\"\nactivate System\nSystem -> System : Calculate order of items\nSystem -> System : Append cookie with checkout flag\n\nalt Customer terminates web browser\nCustomer -> System : Close browser during checkout\nCustomer -> System : Open weborder interface\nSystem -> System : Recognize checkout cookie\nend\nSystem -> Customer : Display account details and payment methods\nCustomer -> System : Confirm account details and payment methods\nCustomer -> System : Confirm order\nSystem -> System : Store order confirmation and details\nSystem -> Customer : Send email confirmation\nSystem -> System : Append cookie with completed checkout flag\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v7_Reference.txt",
        "input": "Requirements:\nLogin Administrator\nGoal:\nLogin to an Administrator account with the system.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator account must already be registered.\nTriggers:\nAdministrator clicks button or link to \"Login\"\nBasic Scenario:\n1. Administrator clicks button or link to initiate login process.\n2. System prompts the Administrator for email and password.\n3. System verifies information.\n4. System creates session cookie.\n5. System displays account home page to Administrator\nAlternative Scenario:\nA1. System recognizes Administrator 's cookie\nA2. Go to Step 5 (Basic Scenario).\nB1. Administrator enters incorrect login information.\nB2. System prompts Administrator to resend login details to email account.\nB3. Administrator confirms.\nB4. System sends email to registered email address.\nB5. Go to Step 1 (Basic Scenario).\nPostconditions:\nThe Administrator is logged into the system.",
        "output": "@startuml\ntitle Login Administrator\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Login\"\nactivate System\nSystem -> Administrator : Prompt for email and password\nAdministrator -> System : Enter email and password\nSystem -> System : Verify information\n\nalt Valid login\n    System -> System : Create session cookie\n    System -> Administrator : Display account home page\nelse Recognized cookie\n    System -> Administrator : Display account home page\nelse Incorrect login\n    System -> Administrator : Prompt to resend login details\n    deactivate System\n    Administrator -> System : Confirm resend\n    activate System\n    System -> Administrator : Send email to registered email address\n    deactivate System\n    note right of Administrator : Returns to Step 1\nend\n\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v8_Reference.txt",
        "input": "Requirements:\nLogout Administrator\nGoal:\nLogout the Administrator account on the system.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be logged-in on the system.\nTriggers:\nAdministrator clicks button or link to \"Logout\"\nBasic Scenario:\n1. Administrator clicks button or link to initiate logout process.\n2. System terminates the session cookie.\n3. System displays home page.\nAlternative Scenario:\nNone\nPostconditions:\nThe Administrator is logged out of the system.",
        "output": "@startuml\ntitle Logout Administrator\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Logout\"\nactivate System\nSystem -> System : Terminate session cookie\nSystem -> Administrator : Display home page\ndeactivate System\n@enduml"
    },
    {
        "file_name": "0000 - gamma j_v9_Reference.txt",
        "input": "Requirements:\nAdd User\nGoal:\nRegister a new customer, sales person, or administrator account with the system.\nActors:\nAdministrator\nWeborder System\nPreconditions:\nAdministrator must be able to access the weborder system via a web browser with HTTPS.\nTriggers:\nAdministrator clicks button or link to \"Add Users\"\nBasic Scenario:\n1. Administrator clicks the button or link to initiate Add user process.\n2. System prompts the Administrator to fill out first name, last name, username, email\naddress, password, and privileges of the user.\n3. System validates new user information.\n4. System creates a new account for the new user with desired privileges.\n5. System displays account home page to Administrator.\nPostconditions:\nA new customer account is created within the system.",
        "output": "@startuml\ntitle Add User\n\nactor Administrator\nparticipant \"Weborder System\" as System\n\nAdministrator -> System : Click \"Add Users\"\nactivate System\nSystem -> Administrator : Prompt to fill user details\nAdministrator -> System : Enter first name, last name, username, email, password, and privileges\nSystem -> System : Validate new user information\nSystem -> System : Create new account with privileges\nSystem -> Administrator : Display account home page\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "2003 - tachonet_v1_Reference.txt",
        "input": "Requirements:\nUse Case 01 – Check driver(s)’ issued cards\nDescription This use case consists of processing a request for checking driver’s issued card\ncoming from a Card Issuing Authority (CIA). Such request could contain the data for\na single driver (online mode) or several drivers (batch mode).\nThis use case is also used by enforcers (on behalf of CIA – as TACHOnet only sees\nCIA as SPOC) during road checks.\nBasic flow The basic flow consists of the following steps:\nStep Action\n1 TACHOnet deciphers the received request and logs the received request\nas-is in its tracking database.\n2 TACHOnet validates its syntax and assigns it a TACHOnet refid\n(TCNRefId).\n3 TACHOnet will build as many new requests as issuing Member State\ncodes identified in the original request (+ another one for all subrequests\nnot mentioning any issuing Member State code) by applying\ndefined name encoding rules to the given surname(s) and first name(s) in\norder to compute the search keys.\n4 For each issuing Member State identified (if any) in the original request,\nTACHOnet builds, logs and encrypts a new request (only containing\nsub-requests for the corresponding issuing Member State), sends it to the\ncorresponding Member State’s CIA application and waits for receiving\nthe response.\nFor the sub-request mentioning any issuing Member State code (if any),\nTACHOnet builds, logs and encrypts a new request (only containing\nsub-requests not mentioning any issuing Member State), broadcasts it to\nall the Member States configured in TACHOnet (except the Member\nState having sent the original request) and waits for receiving each\nresponse.\n5 For each received response, TACHOnet deciphers it, logs it as-is in its\ntracking database and validates its syntax. If it is valid, TACHOnet\nstores the response data (linked to the TCN refid) in the database (for\nlater building the single consolidated response that TACHOnet will send\nwhen all responses are received or when the timeout is reached).\n6 When all responses are received or when the timeout is reached,\nTACHOnet builds, from the received responses stored in its database,\nthe single consolidated response.\n7 TACHOnet logs the consolidated response is in its tracking database,\nencrypts it and sends it to the original caller.\n\nAlternate flows Several alternate flows may exist depending on the result of some events/actions of\nthe basic flow:\nALT-01 When TACHOnet receives a negative response from a Member State\nCIA, it should log it and consider the request sent to that Member\nState CIA as completed (with error).\nALT-02 When TACHOnet receives multiple responses (corresponding to a\nsingle request) from a Member State CIA, it should ignore the\nsuperfluous additional responses. The first received response is the\nprocessed one.\nALT-03 When TACHOnet doesn’t receive within time a Member State CIA\nresponse, it should mention ‘timeout’ as status code for that Member\nState CIA in the consolidated response.\nALT-04 When TACHOnet receives a late Member State CIA response, it\nshould log it and ignore it.\nALT-05 When TACHOnet receives a syntactically invalid request / response,\nit should always send back a negative receipt with ‘Invalid Format\nrequest’ as status code and warn the TCN Administrator.\nALT-06 When TACHOnet receives an invalid XML message (request,\nresponse), it will respond with a negative receipt mentioning the\nreason (invalid format).",
        "output": "@startuml\ntitle Use Case 01 – Check driver(s)’ issued cards\n\nactor CIA as \"Card Issuing Authority\"\nparticipant TACHOnet\nparticipant \"Member State CIA\" as MemberCIA\ndatabase \"TACHOnet Tracking Database\" as DB\nparticipant \"TCN Administrator\" as Admin\n\nCIA -> TACHOnet : Send request (Single/Batch)\nactivate TACHOnet\n\nTACHOnet -> TACHOnet : Decipher request\nTACHOnet -> DB : Log received request as-is\n\nalt Invalid request format\n    TACHOnet -> CIA : Send negative receipt (Invalid Format)\n    TACHOnet -> Admin : Warn TCN Administrator\nend\n\nTACHOnet -> TACHOnet : Validate syntax\n\nalt Invalid XML message\n    TACHOnet -> CIA : Send negative receipt (Invalid XML)\nend\n\nTACHOnet -> TACHOnet : Assign TCNRefId\nTACHOnet -> TACHOnet : Build sub-requests (by Member State codes or broadcast)\nTACHOnet -> DB : Log sub-requests\n\nalt Sub-request for specific Member State\n    TACHOnet -> MemberCIA : Send encrypted request (Single Member State)\n    activate MemberCIA\n    MemberCIA -> TACHOnet : Return response\n    deactivate MemberCIA\nelse Broadcast to all Member States\n    TACHOnet -> MemberCIA : Send encrypted request (All Member States except sender)\n    loop Wait for all responses\n        activate MemberCIA\n        MemberCIA -> TACHOnet : Return response\n        deactivate MemberCIA\n    end\nend\n\nloop Process received responses\n    TACHOnet -> TACHOnet : Decipher response\n    alt Nomal case\n        TACHOnet -> DB : Log response as-is\n    else Negative response from Member State (ALT-01)\n        TACHOnet -> DB : Log response with error status\n    else Multiple responses from Member State (ALT-02)\n        TACHOnet -> TACHOnet : Ignore superfluous responses\n    else No response within timeout (ALT-03)\n        TACHOnet -> TACHOnet : Mark timeout status in consolidated response\n    else Late response (ALT-04)\n        TACHOnet -> DB : Log late response\n        TACHOnet -> TACHOnet : Ignore late response\n    else Invalid response format (ALT-05)\n        TACHOnet -> MemberCIA : Send negative receipt (Invalid Format)\n        TACHOnet -> Admin : Warn TCN Administrator\n   else Invalid XML message (ALT-06)\n        TACHOnet -> MemberCIA : Send negative receipt (Invalid XML)\n    end\nend\n\nalt All responses received or timeout reached\n    TACHOnet -> TACHOnet : Build single consolidated response\n    TACHOnet -> DB : Log consolidated response\n    TACHOnet -> CIA : Send encrypted consolidated response\nend\n\ndeactivate TACHOnet\n@enduml"
    },
    {
        "file_name": "2003 - tachonet_v2_Reference.txt",
        "input": "Requirements:\nUse Case 02 – Check tachograph card status\nDescription This use case consists of checking the status of a tachograph card based on its card\nnumber. This use case is very useful for CIAs in order to check the validity of a card\nprior to performing some administrative tasks (e.g. to avoid from declaring a\nlost/stolen card for a wrongly keyed-in card number,...). It is also useful for\nenforcement authorities during road-checks where workshop could also be checked\n(beside driver cards).\nThe checked card is identified by its card number and its issuing Member State code.\nAs an issued card must be unique, it should only exist in a single CIA data store (the\nCIA having issued the card).\nBasic flow The basic flow consists of the following steps:\nStep Action\n1 TACHOnet deciphers the received request and logs the received request\nas-is in its tracking database.\n2 TACHOnet validates its syntax and assigns it a TACHOnet refid\n(TCNRefId).\n3 TACHOnet will build as many new requests as issuing Member State\ncodes identified in the original request. TACHOnet figures out the target\nissuing Member State(s) from the issuing Member State code given for\neach to-be-checked card. Every new request only contains card\nnumber(s) issued by a particular Member State.\n4 For each identified issuing Member State(s), TACHOnet builds, logs and\nencrypts the new request, sends it to it and waits for receiving the\nresponse.\n5 For each received response, TACHOnet deciphers it, logs it as-is in its\ntracking database and validates its syntax. If it’s valid, TACHOnet stores\nthe response message (linked to the TCNRefId) in the database (for later\nbuilding the single consolidated response that TACHOnet will send\nwhen all responses are received or when the timeout is reached).\n6 When all responses are received or when the timeout is reached,\nTACHOnet builds, logs and encrypts the consolidated response (from\nthe responses received so far), and sends it to the original caller.",
        "output": "@startuml\ntitle Use Case 02 – Check tachograph card status\n\nactor CIA as \"Card Issuing Authority\"\nparticipant TACHOnet\nparticipant \"Member State CIA\" as MemberCIA\ndatabase \"TACHOnet Tracking Database\" as DB\n\nCIA -> TACHOnet : Send request (Card number and Issuing Member State code)\nactivate TACHOnet\n\nTACHOnet -> TACHOnet : Decipher request\nTACHOnet -> DB : Log received request as-is\n\nTACHOnet -> TACHOnet : Validate syntax\nTACHOnet -> TACHOnet : Assign TCNRefId\n\nTACHOnet -> TACHOnet : Build new requests (by Issuing Member State codes)\nTACHOnet -> DB : Log new requests\n\nloop For each identified Issuing Member State\n    TACHOnet -> MemberCIA : Send encrypted request\n    activate MemberCIA\n    MemberCIA -> TACHOnet : Send response\n    deactivate MemberCIA\nend\n\nloop Process received responses\n    TACHOnet -> TACHOnet : Decipher response\n    TACHOnet -> DB : Log response as-is\n    TACHOnet -> TACHOnet : Validate syntax\n    TACHOnet -> DB : Store response message (linked to TCNRefId)\nend\n\nalt All responses received or timeout reached\n    TACHOnet -> TACHOnet : Build consolidated response\n    TACHOnet -> DB : Log consolidated response\n    TACHOnet -> CIA : Send encrypted consolidated response\nend\n\ndeactivate TACHOnet\n@enduml"
    },
    {
        "file_name": "2003 - tachonet_v5_Reference.txt",
        "input": "Requirements:\nUse Case 05 – Get Phonex Search Keys\nDescription This use case consists of getting from TACHOnet the computed search keys (based\non the Phonex algorithm) corresponding to the given last name and first names.\nThe Member State CIAs should call upon this service when issuing a new card to get\nthe computed search keys of the driver’s surname and first names, so to store them in\ntheir local data store. When a Member State CIA will receive a TACHOnet request\nfor checking driver’s issued card, it should use the search keys given in the request to\nsearch against their local data store (along with the given driver’s birth date). It’s\ntherefore of major importance to use a common algorithm and to store computed\nsearch keys in the local data store.\nNevertheless, Member States are free to use their own Phonetic algorithm (if existing\nlike in Germany). In such a case, it’s the Member State responsibility to compute the\nsearch keys based on the given driver’s surname and first of the first names.\nBasic flow The basic flow consists of the following steps:\nStep Action\n1 The CIA calls the TACHOnet service giving the driver’s surname and\nfirst names.\n2 TACHOnet checks the input parameters and, if valid, computes the\ncorresponding surname and first of the first names search keys.\n3 TACHOnet returns the computed search keys as output parameters.\nAlternate flows 2a If the input parameters are invalid (e.g. illegal character,…), TACHOnet\nreturns a negative status code to the request.\nSpecial\nrequirements\n· This service should ideally be implemented as a synchronous Web Service.\n· A web interface on top of this service should also be supplied to allow the CIA\nusers to access manually these TACHOnet services.\n· A downloadable version of this web service should also be made available (.NET\nand Java) to enable some Member States to install and use it locally.\nPre-conditions The caller must provide the mandatory input parameters.\nPost-conditions The caller has received the computed search keys (or a negative error code).\nActors · A CIA (when issuing a new card) or an enforcer (via a CIA)\n· The TACHOnet system",
        "output": "@startuml\ntitle Use Case 05 – Get Phonex Search Keys\n\nactor CIA as \"Card Issuing Authority\"\nparticipant TACHOnet\n\nCIA -> TACHOnet : Send request (Driver's surname and first names)\nactivate TACHOnet\n\nTACHOnet -> TACHOnet : Validate input parameters\nalt Valid input\n    TACHOnet -> TACHOnet : Compute Phonex search keys\n    TACHOnet -> CIA : Return computed search keys\nelse Invalid input\n    TACHOnet -> CIA : Return negative status code\nend\n\ndeactivate TACHOnet\n@enduml"
    },
    {
        "file_name": "2003 - tachonet_v6_Reference.txt",
        "input": "Requirements:\nUse Case 06 – Get US/Ascii Transliteration\nDescription This use case consists of getting from TACHOnet the US/Ascii (ISO 646 IRV)\ntransliteration (From Latin or Greek) of the given driver’s surname, first names,\nplace of birth and driving license number.\nUp to now, this use case only provides the transliteration from Greek (according to\nthe ISO 843:1997 standard) or Latin to US/Ascii. Other transliterations (e.g. Cyrillic\nto US/Ascii according to ISO 9:1995) will be provided when needed.\nBasic flow The basic flow consists of the following steps:\nStep Action\n1 The CIA calls the TACHOnet service giving the driver’s surname, first\nnames, place of birth and driving license number.\n2 TACHOnet checks the input parameters and, if valid, transliterates the\ncorresponding values into US/Ascii.\n3 TACHOnet returns the transliterated values as output parameters.\nAlternate flows 2a If the input parameters are invalid (e.g. illegal character,…), TACHOnet\nreturns a negative status code to the request.\nSpecial\nrequirements\n· This service should ideally be implemented as a synchronous Web Service.\n· A web interface on top of this service should also be supplied to allow the CIA\nusers to access manually these TACHOnet services.\n· A downloadable version of this web service should also be made available (.NET\nand Java) to enable some Member States to install and use it locally.\nPre-conditions The caller must provide the mandatory input parameters.\nPost-conditions The caller has received the computed search keys (or a negative error code).\nActors · A CIA (when issuing a new card) or an enforcer (via a CIA)\n· The TACHOnet system",
        "output": "@startuml\ntitle Use Case 06 – Get US/Ascii Transliteration\n\nactor CIA as \"Card Issuing Authority\"\nparticipant TACHOnet\n\nCIA -> TACHOnet : Send request (Surname, First Names, Place of Birth, Driving License Number)\nactivate TACHOnet\n\nTACHOnet -> TACHOnet : Validate input parameters\nalt Valid input\n    TACHOnet -> TACHOnet : Transliterate values to US/Ascii\n    TACHOnet -> CIA : Return transliterated values\nelse Invalid input\n    TACHOnet -> CIA : Return negative status code\nend\n\ndeactivate TACHOnet\n@enduml"
    },
    {
        "file_name": "GPT_contain_alt_v1.txt",
        "input": "# Requirements: Product Return and Refund\n\n## Goal\nAllow a customer to request a product return and manage different outcomes depending on the return policy, product condition, and timing.\n\n## Actors\n- **Customer (C)**: Initiates the return request.\n- **E-commerce System (ES)**: Manages the return process and checks policies.\n- **Warehouse (W)**: Receives the returned product if approved.\n- **Payment Gateway (PG)**: Processes refunds when required.\n\n## Preconditions\n- The customer has an order history in the system.\n- The product was purchased within some return window (e.g., 30 days), though this must be verified.\n- The warehouse is capable of receiving returns.\n\n## Triggers\n- The customer initiates a “Return Product” request through their order history page.\n\n## Basic Scenario - Eligible for Return\n1. The customer requests to return a product.\n2. The E-commerce System checks if the product is eligible for return (within the return window, correct order status, etc.).\n3. The E-commerce System prompts the customer to confirm the reason for the return.\n4. **If the reason is valid** (e.g., defective item):\n   - The system authorizes the return and sends a return shipping label to the customer.\n5. **If the reason is invalid** (e.g., “I changed my mind” after the return window):\n   - The system may still authorize the return but with a restocking fee.\n6. If a return is authorized, the customer ships the product back to the warehouse.\n7. Once the warehouse receives the item, the E-commerce System updates the order status.\n8. Based on the product condition:\n   - **Acceptable Condition:** A refund is issued through the Payment Gateway.\n   - **Damaged or Missing Parts:** The system may deny the refund or issue a partial refund.\n9. The E-commerce System notifies the customer of the final outcome (full refund, partial refund, or denial).\n\n## Alternative Flows A - Not Eligible for Return\n1. Same as Basic Scenario step 1. \n2. Same as Basic Scenario step 2.\n3. The system denies the return request, explaining the policy reason.\n4. The customer can contact support for further assistance or accept the denial.",
        "output": "@startuml\ntitle Product Return and Refund\n\nactor \"Customer\" as C\nparticipant \"E-commerce System\" as ES\nparticipant \"Warehouse\" as W\nparticipant \"Payment Gateway\" as PG\n\nC -> ES: Request Return for Product\nactivate ES\nES -> ES: Check Return Eligibility\n\nalt Eligible for Return\n  ES -> C: Prompt for return reason\n  alt Reason is valid (e.g., defective)\n    ES -> C: Authorize return, provide shipping label\n  else Reason is invalid or changed mind\n    ES -> C: Authorize return with restocking fee\n  end\n\n  C -> W: Ship product back\n  activate W\n  W -> ES: Notify product received\n  deactivate W\n\n  ES -> ES: Inspect product condition\n  alt Product in acceptable condition\n    ES -> PG: Issue Refund\n    activate PG\n    PG --> ES: Refund Confirmed\n    deactivate PG\n    ES -> C: Notify Full Refund\n  else Product damaged or incomplete\n    ES -> C: Partial refund or denial\n  end\n\nelse Not Eligible for Return\n  ES -> C: Return Request Denied\nend\n\ndeactivate ES\n@enduml"
    },
    {
        "file_name": "GPT_contain_interaction_v1.txt",
        "input": "# Requirements: Service Request\n\n## Goal\nAllow a customer to submit a service request after ensuring they are logged in by a login process.\n\n## Actors\n- **Customer**: Initiates the service request.\n- **Service Portal**: Manages the overall request flow.\n- **Authentication Service**: Handles the login process.\n- **Order Processing**: Handles order inquiries.\n- **Support Desk**: Handles support requests.\n\n## Preconditions\n- The customer may not yet be logged in when starting a service request.\n- The common login process is available for reuse.\n\n## Triggers\n- The customer submits a service request.\n\n## Basic Scenario\n1. The customer initiates a service request via the Service Portal.\n2. The Service Portal invokes the login process to ensure the customer is authenticated (Refer to Login Process).\n3. After successful login, the Service Portal routes the request to the appropriate handler:\n   - If it’s an order inquiry, the request goes to Order Processing.\n   - If it’s a support issue, the request goes to the Support Desk.\n4. The chosen system processes the request and returns a response to the customer.",
        "output": "@startuml\ntitle Service Request\n\nactor Customer\nparticipant \"Service Portal\" as SP\nparticipant \"Auth Service\" as AS\nparticipant \"Order Processing\" as OP\nparticipant \"Support Desk\" as SD\n\nCustomer -> SP: Initiate Service Request\nactivate SP\n\n' Reuse the common login process as an embedded interaction:\nref over Customer, AS \n  Common Login Process\nend ref\n\nalt Request is for Order Inquiry\n  SP -> OP: Process Order Inquiry\n  OP --> SP: Return Order Details\nelse Request is for Support\n  SP -> SD: Process Support Request\n  SD --> SP: Return Ticket Confirmation\nend\n\nSP --> Customer: Return Service Response\ndeactivate SP\n@enduml"
    },
    {
        "file_name": "GPT_contain_loop_v1.txt",
        "input": "# Requirements: Generate Order Summaries\n\n## Goal\nAllow a user to request an order summary that processes multiple items in their cart sequentially.\n\n## Actors\n- **User** – Initiates the summary request.\n- **E-Commerce System** – Retrieves cart details and processes each item.\n- **Inventory Service** – Provides pricing and availability details for each item.\n\n## Preconditions\n- The user must have an active cart.\n- The E-Commerce System and Inventory Service are both available.\n\n## Triggers\n- The user clicks the “View Order Summary” button.\n\n## Basic Scenario\n1. The user requests an order summary from the E-Commerce System.\n2. The E-Commerce System retrieves the list of items in the user’s cart.\n3. The system enters a loop, iterating over each cart item:\n   - For each item, it queries the Inventory Service for up-to-date pricing and availability.\n   - The Inventory Service returns the item details.\n4. After all items are processed, the E-Commerce System calculates the total cost and applicable taxes.\n5. The system returns the completed order summary to the user.\n\n## Alternative Scenario\n- If the Inventory Service fails or times out for an item, the E-Commerce System logs the error, skips that item, and continues with the next item in the loop.",
        "output": "@startuml\ntitle Generate Order Summaries (Loop + Alternative Scenario)\n\nactor User\nparticipant \"E-Commerce System\" as ECS\nparticipant \"Inventory Service\" as IS\n\nUser -> ECS: Click \"View Order Summary\"\nactivate ECS\n\nECS -> ECS: Retrieve cart items\n\nloop For each Item in Cart\n    ECS -> IS: Request Item Details\n    activate IS\n    alt Inventory Service Succeeds\n        IS --> ECS: Return Pricing & Availability\n    else Inventory Service Fails or Times Out\n        ECS -> ECS: Log error (skip item)\n    end\n    deactivate IS\nend\n\nECS -> ECS: Calculate total cost & taxes\nECS --> User: Display Order Summary\ndeactivate ECS\n@enduml"
    },
    {
        "file_name": "GPT_contain_opt_v1.txt",
        "input": "# Requirements: Order Shipment\n\n## Goal\nProcess an order shipment and, if the customer opted for shipment insurance, process the insurance and send policy details.\n\n## Actors\n- **Customer**: Places the order and may opt in for shipment insurance.\n- **Logistics Management System (LMS)**: Manages order shipments and coordinates optional insurance processing.\n- **Shipping Carrier (SC)**: Handles pickup and delivery of the order.\n- **Insurance Service (IS)**: Processes shipment insurance if requested.\n\n## Preconditions\n- The order is ready for shipment.\n- The customer has either opted for shipment insurance or not.\n- LMS is integrated with both the Shipping Carrier and the Insurance Service.\n\n## Triggers\n- The order is finalized and ready to be shipped.\n\n## Scenario\n1. The LMS schedules the order pickup and delivery with the Shipping Carrier.\n2. The Shipping Carrier confirms the shipment.\n3. If insurance was selected:\n   - The LMS contacts the Insurance Service to process shipment insurance.\n   - Once processed, the LMS sends the insurance policy details to the customer.\n4. The LMS notifies the customer that the order has been shipped.",
        "output": "@startuml\ntitle Order Shipment\n\nactor \"Customer\" as C\nparticipant \"Logistics Management System\" as LMS\nparticipant \"Shipping Carrier\" as SC\nparticipant \"Insurance Service\" as IS\n\nLMS -> SC: Schedule Pickup and Delivery\nactivate LMS\nactivate SC\nSC --> LMS: Shipment Confirmed\ndeactivate SC\n\nopt Customer opted for Insurance\n  LMS -> IS: Process Shipment Insurance\n  activate IS\n  IS --> LMS: Insurance Processed\n  deactivate IS\n  LMS -> C: Send Insurance Policy Details\nend\n\nLMS -> C: Notify Order Shipped\ndeactivate LMS\n@enduml"
    },
    {
        "file_name": "GPT_contain_par_v1.txt",
        "input": "# Requirements: Self-Driving Car Emergency Response\n\n## Goal\nEnsure that when a self-driving car detects an obstacle, it can simultaneously engage emergency braking and compute a new route to safely navigate around the obstacle.\n\n## Actors\n- **Autonomous Vehicle (AV):** Detects obstacles and initiates the emergency response.\n- **Vehicle Control Unit (VCU):** Analyzes the situation and coordinates safety and navigation actions.\n- **Safety System (SS):** Responsible for engaging emergency braking.\n- **Navigation System (NS):** Calculates an alternative route.\n\n## Preconditions\n- The autonomous vehicle is operating and its sensors detect an obstacle.\n- The Safety System and Navigation System are active and responsive.\n\n## Triggers\n- An obstacle is detected by the vehicle’s sensor suite.\n\n## Scenario\n1. The Autonomous Vehicle detects an obstacle and notifies the VCU.\n2. The VCU analyzes the situation and simultaneously initiates two parallel interactions:\n   - **Interaction 1:** Sends a command to the Safety System to engage emergency braking.\n   - **Interaction 2:** Requests a new route from the Navigation System.\n3. The Safety System engages emergency braking, and the Navigation System computes a new route concurrently.\n4. Once both actions complete, the VCU updates the vehicle’s status (indicating braking is active and a new route is available) and logs the event.",
        "output": "@startuml\ntitle Self-Driving Car Emergency Respons\nactor \"Autonomous Vehicle\" as AV\nparticipant \"Vehicle Control Unit\" as VCU\nparticipant \"Safety System\" as SS\nparticipant \"Navigation System\" as NS\n\nAV -> VCU: Detect Obstacle\nactivate VCU\nVCU -> VCU: Analyze Situation\n\npar Emergency Braking\n    VCU -> SS: Initiate Emergency Braking\n    activate SS\n    SS --> VCU: Braking Engaged\n    deactivate SS\nelse Rerouting\n    VCU -> NS: Request New Route\n    activate NS\n    NS --> VCU: New Route Calculated\n    deactivate NS\nend\n\nVCU -> AV: Update Status (Braking & New Route)\nVCU -> VCU: Log Emergency Event\ndeactivate VCU\n@enduml"
    },
    {
        "file_name": "simple_one.txt",
        "input": "# Requirements: User Login\n\n## Goal\nAllow a user to log into the system with email and password.\n\n## Actors\n- **User**\n- **Web System**\n\n## Preconditions\n- User must already have an account registered.\n\n## Triggers\n- User clicks the \"Login\" button or link.\n\n## Basic Scenario\n1. User clicks \"Login.\"\n2. Web System requests email and password.\n3. User provides credentials.\n4. Web System verifies credentials.\n5. Web System creates a session.\n6. User is shown the dashboard.",
        "output": "@startuml\ntitle User Login\n\nactor User\nparticipant \"Web System\" as System\n\nUser -> System: Click \"Login\"\nactivate System\n\nSystem -> User: Request email & password\nUser -> System: Provide credentials\n\nSystem -> System: Verify credentials\nSystem -> System: Create session\n\nSystem -> User: Display dashboard\ndeactivate System\n@enduml"
    }
]