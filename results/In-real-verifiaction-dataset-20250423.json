[
    {
        "file_name": "2007-central-trading-system_v0_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nUse-case Sell stock \nPrimary actor Transaction User Interface \nGoal in context To fulfill the sell transaction \nPreconditions \nCustomer has successfully logged into UI and submit the sell \ninformation \nTrigger The ‘sell’ button on UI been clicked \nScenario \n1. transaction user interface: give the sell instruction \n2. central trading system: save the sell instruction \n3. central trading system: match the instructions with the \nsame stock id \n4. central trading system: make a trade by matching \n5. central trading system: modify the information of matched \ninstructions \nException \n1. all the operations have been suspended \n2. some deal exceptions come up \n3. no matched stock with the buy instruction \nPriority Essential, must be implemented \nWhen available First increment \nFrequency of use Frequent \nChannel to actor Via transaction user interface \nSecondary actors Trading System Management \nChannels to \nsecondary actors \nVia central trading system interface \nOpen issues \n1. Should the trade information return to Transaction User \nInterface immediately when the deal is done? \n2. Should the failure of trade return to Transaction User \nInterface the next day? \n3. If exception happens, is exception log needed? \n4. security issue",
        "output": "@startuml\ntitle Use-case Sell stock\n\nactor Customer\nactor \"Transaction User Interface\" as TUI\nparticipant \"Central Trading System\" as CTS\n\ngroup Trigger\nCustomer -> TUI: Click 'Sell' button\nend\n\nTUI -> CTS: Give sell instruction\nactivate CTS\nalt common case\nCTS -> CTS: Save the sell instruction\nCTS -> CTS: Match the instructions with the same stock id\nalt Matched stock found\n    CTS -> CTS: Make a trade by matching\n    CTS -> CTS: Modify the information of matched instructions\n    CTS -> TUI: Trade information updated\n    TUI -> Customer: Display Trade successful\nelse No matched stock found\n    CTS -> TUI: No matched stock with buy instruction\n    TUI -> Customer: Display Trade failed\nelse Some deal exceptions come up\n    CTS -> TUI: Deal exceptions come up\n    TUI -> Customer: Display Trade failed\nend\nelse all the operations have been suspended\n    CTS -> TUI: All the operations have been suspended\n    deactivate CTS\n    TUI -> Customer: Display Trade failed\nend\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v10_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.10. Sell Item\nAny item in the inventory may be purchased by a Construction Junction customer. The sale of the item is processed by QuickBooks POS and the inventory must be updated accordingly.\n3.10.1. Actor(s): Buyer Sales Associate Customer Service Representative\n3.10.2. Assumptions, Pre-Conditions & Triggers:\n1. The item being purchased has been previously added to the inventory.\n3.10.3. Use Case Dependencies\n1. Add Item to Inventory\n3.10.4. Basic Flows:\n1. Buyer arrives at the cashier or checkout desk with the items to be purchased\n2. Sales associate scans the item tags\n3. Sales associate processes the sale of the items in QuickBooks POS\n4. The system updates the inventory to reflect the sale\n3.10.5. Alternative Flows:\n1. Certain items sold in QuickBooks POS may not exist in the inventory (under $5 items, for instance). The system must be able to recognize that situation and bypass the inventory update.\n3.10.6. Business Rules:\n1. After a sale in QuickBooks POS, the following item attributes must be updated in the inventory:\n1.1. Sale price\n1.2. Quantity on hand\n2. The sale price must not override the original item price in the inventory\n3. The item quantity on hand in the inventory must be decremented by the quantity sold\n3.10.7. Post-Condition(s):\n1. Inventory is updated to reflect the sale\n3.10.8. Open Issues:\nNone\n3.10.9. Extension Points:\nNone\n3.10.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.10 – Sell Item\n\nactor \"Buyer\" as Buyer\nactor \"Sales Associate\" as Associate\nparticipant \"QuickBooks POS\" as POS\nparticipant \"Inventory System\" as System\n\n== Process Sale ==\nBuyer -> Associate : 1. Arrives at checkout with items\n\nAssociate -> POS : 2. Scan item tags\nactivate POS\nAssociate -> POS : 3. Process sale in QuickBooks POS\n== Update Inventory ==\nalt Item exists in Inventory\n    POS -> System : Update inventory (sale price, quantity on hand)\n    activate System\n    System -> System : Adjust quantity on hand (- quantity sold)\n    System -> System : Record sale price (do not override original price)\n\nelse Item does not exist in Inventory\n    POS -> System : Bypass inventory update (e.g., under $5 items)\nend\ndeactivate System\ndeactivate POS\n\n\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v1_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.1. View Inventory\nThe system should provide a categorized view of the entire inventory to the Construction Junction staff. Starting at the department level, users can navigate into the inventory item categories and sub-categories, all the way down to an individual inventory item.\n3.1.1. Actor(s): Administrator Director Manager Customer Service Representative Receiving Associate Pick Up Associate Decon Associate\n3.1.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.1.3. Use Case Dependencies\nNone\n3.1.4. Basic Flows:\n1. User accesses the main inventory screen\n2. The screen displays all inventory departments\n3. User clicks a department cell\n4. The screen displays all inventory categories for the selected department\n5. User clicks a category cell that contains sub-categories\n6. The screen displays all inventory sub-categories for the selected category\n7. User clicks a sub-category cell (leaf category)\n7.1. For a Unique Item category:\n7.1.1. The screen displays a list of all inventory items for that selected category\n7.1.2. User clicks an item in the items list\n7.1.3. The screen displays the details for the item\n7.2. For a Stock Item category:\n7.2.1. The screen displays the details for that Stock Item category\n7.3. For a Under $5 category:\n7.3.1. Nothing happens – The category cell is not clickable\n3.1.5. Alternative Flows:\n1. At any point, the user may click on a department on the inventory department shortcuts list, which takes the user to the inventory view for that particular department.\n2. The user may click the View All Items button at any level in the inventory to view a list of all items in that department or category\n3. The user may click the View All Items button on the main inventory screen to view the complete list of all items in the inventory\n4. Once in the view items list screen, the user may filter the results by searching for:\n4.1. A particular item by item number\n4.2. All items with Donor, Department, Category or Description matching the provided keyword\n4.3. All items with certain attributes, features and/or details\n3.1.6. Business Rules:\n1. Inventory departments and categories are displayed in matrix format\n2. The matrix dimensions are fixed, and are the same when displaying departments or categories.\n3. Unused matrix cells are displayed empty.\n4. The actual matrix dimensions are to be determined during system implementation.\n4.1. The matrix should be able to hold at least 30 tiles at each level\n5. Each matrix cell displays a department or category name.\n5.1. For departments with subcategories, the department name is a hyperlink to the view of the department subcategories\n5.2. For a department with no subcategories, the department name is a hyperlink to the view of the items in that department\n5.3. For categories with subcategories, the category name is a hyperlink to the view of the subcategories\n5.4. For a category with no subcategories\n5.4.1. For a Unique Item category, the category name is a hyperlink to a view of the items under that category\n5.4.2. For a Stock Item category, the category name is a hyperlink to a view of the details for that Stock Item, including the current quantity on hand\n5.4.3. For a Under $5 category:\n5.4.3.1. The category name is not a hyperlink\n6. By default, the items list contains the list of all Unique and Stock items in the selected department or category, or across all departments and categories when viewing the all inventory items screen\n7. When a search keyword is specified, the system filters the default items list for that screen and returns only the items for which the keyword matches one or more of the following columns:\n7.1. Donor\n7.2. Department\n7.3. Category\n7.4. Description\n8. When user clicks on an item in the items list for a category or department, the system displays the item details screen\n9. Departments and categories are listed in alphabetical order in each row, from left to right and top to bottom\n10. The cell in the top left corner of the matrix always represents a generic item in the selected department (e.g. a generic appliance when viewing the categories in the appliance department) and is automatically generated by the system\n11. The cell to the right of the top left corner of the matrix always represents under $5 items in the selected department and is automatically generated by the system\n3.1.7. Post-Condition(s):\nNone\n3.1.8. Open Issues:\nNone\n3.1.9. Extension Points:\nNone\n3.1.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.1 – View Inventory\n\nactor \"User\" as User\nparticipant \"Inventory System\" as System\n\n== Access Inventory ==\nUser -> System : 1. Access main inventory screen\nactivate System\nSystem -> User : 2. Display all inventory departments\ndeactivate System\n\n== Navigate Through Inventory ==\nUser -> System : 3. Click a department cell\nactivate System\nSystem -> User : 4. Display categories for selected department\ndeactivate System\n\nUser -> System : 5. Click a category cell\nactivate System\nSystem -> User : 6. Display subcategories for selected category\ndeactivate System\n\nUser -> System : 7. Click a sub-category cell (leaf category)\nactivate System\nalt Unique Item category\n    System -> User : 7.1.1 Display list of all inventory items\n    User -> System : 7.1.2 Click an item\n    System -> User : 7.1.3 Display item details\nelse Stock Item category\n    System -> User : 7.2.1 Display details for Stock Item\nelse Under $5 category\n    System -> User : 7.3.1 Do nothing (cell not clickable)\nend\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v2_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.2. Manage Departments\nThe system should allow inventory administrators to customize the inventory structure by defining the inventory departments (not to be confused actual retail floor departments known later in this document as stocking locations).\n3.2.1. Actor(s): Administrator\n3.2.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.2.3. Use Case Dependencies\n1. View Inventory\n3.2.4. Basic Flows:\n1. Add Department\n1.1. User accesses the main inventory screen\n1.2. System displays the Add Department button\n1.3. User clicks the Add Department button\n1.4. User enters the Department data\n1.5. System validates the Department data\n1.6. System adds the new Department to the inventory\n1.7. User is taken back to the main inventory screen\n2. Edit Department\n2.1. User navigates to a Department (see View Inventory)\n2.2. System displays the Edit Department button\n2.3. User clicks the Edit Department button\n2.4. System displays the Department data\n2.5. User edits Department data\n2.6. System validates the Department data\n2.7. System updates the Department information\n2.8. User is taken back to the Department screen\n3. Delete Department\n3.1. User navigates to a Department (see View Inventory)\n3.2. System displays the Edit Department button\n3.3. User clicks the Edit Department button\n3.4. System displays the Department data\n3.5. User clicks the Delete Department button\n3.6. System validates the Department deletion\n3.7. System removes the Department from the inventory\n3.8. User is taken back to the main inventory screen\n3.2.5. Alternative Flows:\n1. Add Department\n1.1. User cancels the Department add and is taken back to the main inventory screen\n1.2. During data validation, data is deemed invalid and an error message is presented to the user\n2. Edit Department\n2.1. User cancels the Department edit and is taken back to the main inventory screen\n2.2. During data validation, data is deemed invalid and an error message is presented to the user\n3. Delete Department\n3.1. User cancels the Department deletion and is taken back to the Department screen\n3.2. During deletion validation, deletion is deemed invalid and an error message is presented to the user\n3.2.6. Business Rules:\n1. Add Department\n1.1. The following fields are mandatory:\n1.1.1. Name\n1.1.2. POS Department Code\n1.1.3. Unique Tag\n1.2. The Department Name must be unique across the inventory\n1.3. The Department‟s Unique Tag must be unique across the inventory\n1.4. The POS Department Code must be at most 3 characters long\n1.5. The Unique Tag must be at most 18 characters long\n1.6. There must be at least one slot available in the Department matrix to hold the new Department\n2. Edit Department\n2.1. The following fields are mandatory:\n2.1.1. Name\n2.1.2. Unique Tag\n2.2. The Department Name must be unique across the inventory\n2.3. The Department‟s Unique Tag must be unique across the inventory\n2.4. The Unique Tag must be at most 18 characters long\n3. Delete Department\n3.1. A Department cannot be deleted if it contains categories and/or items\n3.2. The system must ask for confirmation before deleting a Department\n3.2.7. Post-Condition(s):\n1. Add Department\n1.1. The new Department is added\n2. Edit Department\n2.1. The Department is updated\n3. Delete Department\n3.1. The Department is deleted\n3.2.8. Open Issues:\nNone\n3.2.9. Extension Points:\nNone\n3.2.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.2 – Manage Departments\n\nactor \"Administrator\" as Admin\nparticipant \"Inventory System\" as System\n\n== Add Department ==\nAdmin -> System : 1.1 Access main inventory screen\nactivate System\nSystem -> Admin : 1.2 Display Add Department button\nAdmin -> System : 1.3 Click Add Department button\nSystem -> Admin : 1.4 Prompt to enter Department data\n\nalt Normal Case\n    Admin -> System : Enter Department data\n    System -> System : 1.5 Validate Department data\nalt Data valid\n    System -> System : 1.6 Add Department to inventory\n    System -> Admin : 1.7 Return to main inventory screen\nelse Data invalid\n    System -> Admin : Error: Invalid Department data\nend\n\nelse Cancels Department add\n    Admin -> System : Cancels Department add\n    System -> Admin : Back to Main inventory screen\nend\ndeactivate System\n\n== Edit Department ==\nAdmin -> System : 2.1 Navigate to Department\nref over Admin, System: See detailed diagram in View Inventory\nactivate System\nSystem -> Admin : 2.2 Display Edit Department button\nAdmin -> System : 2.3 Click Edit Department button\nSystem -> Admin : 2.4 Display Department data\n\nalt Normal Case\nAdmin -> System : 2.5 Edit Department data\nSystem -> System : 2.6 Validate Department data\nalt Data valid\n    System -> System : 2.7 Update Department information\n    System -> Admin : 2.8 Return to Department screen\nelse Data invalid\n    System -> Admin : Error: Invalid Department data\nend\n\nelse Cancels Department edit\n    Admin -> System : Cancels Department edit\n    System -> Admin : Back to Main inventory screen\nend\ndeactivate System\n\n== Delete Department ==\nAdmin -> System : 3.1 Navigate to Department\nref over Admin, System: See detailed diagram in View Inventory\nactivate System\nSystem -> Admin : 3.2 Display Edit Department button\nAdmin -> System : 3.3 Click Edit Department button\nSystem -> Admin : 3.4 Display Department data\n\nalt Normal Case\nAdmin -> System : 3.5 Click Delete Department button\nSystem -> System : 3.6 Validate Department deletion\nalt Deletion valid\n    System -> System : 3.7 Remove Department from inventory\n    System -> Admin : 3.8 Return to main inventory screen\nelse Deletion invalid\n    System -> Admin : Error: Cannot delete Department (contains categories/items)\nend\n\nelse Cancels Department edit\n    Admin -> System : Cancels Department deletion\n    System -> Admin : Back to Main inventory screen\nend\ndeactivate System\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v3_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.3. Manage Categories\nThe system should allow inventory administrators to customize the inventory structure by defining the inventory departments and categories.\n3.3.1. Actor(s): Administrator\n3.3.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.3.3. Use Case Dependencies\n1. View Inventory\n2. Manage Attributes and Details\n3.3.4. Basic Flows:\n1. Add Category\n1.1. User navigates to a Department or Category (see View Inventory)\n1.2. System displays the Add Category buttons\n1.2.1. Unique Item\n1.2.2. Stock Item\n1.3. User clicks the desired Add Category button\n1.4. System displays the appropriate screen for the Category type\n1.4.1. Unique Item\n1.4.2. Stock Item\n1.5. User enters Category data\n1.6. System validates the Category data\n1.7. System adds the new Category to the inventory\n1.8. User is taken back to the parent Department or Category of the added Category\n2. Edit Category\n2.1. User navigates to a Category (see View Inventory)\n2.2. System displays the Edit Category button\n2.3. User clicks the Edit Category button\n2.4. System displays the appropriate screen for the Category type\n2.4.1. Unique Item\n2.4.2. Stock Item\n2.5. User edits Category data\n2.6. System validates the Category data\n2.7. System updates the Category information\n2.8. User is taken back to the Category screen\n3. Delete Category\n3.1. User navigates to a Category (see View Inventory)\n3.2. System displays the Edit Category button\n3.3. User clicks the Edit Category button\n3.4. System displays the appropriate screen for the Category type\n3.4.1. Unique Item\n3.4.2. Stock Item\n3.5. User clicks the Delete Category button\n3.6. System validates the Category deletion\n3.7. System removes the Category from the inventory\n3.8. User is taken back to the parent Department or Category of the deleted Category\n4. Move Categories\n4.1. User navigates to a Department or Category (see View Inventory)\n4.2. System displays the Move Categories button\n4.3. User clicks the Move Categories button\n4.4. System displays the Move Categories screen\n4.5. User selects Categories to move\n4.6. User selects target location on categorized inventory for the moved Categories\n4.6.1. User may select an existing Department or Category\n4.6.2. User may choose to create a new Category to hold the moved Categories\n4.6.2.1. In this case, user selects the parent Department or Category of the new Category to be created\n4.6.2.2. User enters the new Category data\n4.7. User selects the type of move to be performed\n4.7.1. Move selected\n4.7.2. Merge the contents (items) of the selected categories and add them to the target Department or Category\n4.8. System validates the entered data\n4.9. System moves the selected Categories\n4.10. User is taken back to the parent Department or Category of the moved Categories\n3.3.5. Alternative Flows:\n1. Add Category\n1.1. User cancels the Category add and is taken back to parent Department or Category\n1.2. During data validation, data is deemed invalid and an error message is presented to the user\n2. Edit Category\n2.1. User cancels the Category edit and is taken back to Category screen\n2.2. During data validation, data is deemed invalid and an error message is presented to the user\n3. Delete Category\n3.1. User cancels the Category deletion and is taken back to the Category screen\n3.2. During deletion validation, deletion is deemed invalid and an error message is presented to the user\n4. Move Categories\n4.1. User cancels the Category move and is taken back to the parent Department or Category screen\n4.2. During move validation, move is deemed invalid and an error message is presented to the user\n3.3.6. Business Rules:\n1. Add Category\n1.1. The following fields are mandatory:\n1.1.1. Unique Item Category\n1.1.1.1. Name\n1.1.1.2. Unique Tag\n1.1.2. Stock Item Category\n1.1.2.1. Name\n1.1.2.2. Unique Tag\n1.1.2.3. Price\n1.2. The Category Name must be unique across the inventory\n1.3. The Category‟s Unique Tag must be unique across the inventory\n1.4. The Unique Tag must be at most 18 characters long\n1.5. There must be at least one slot available in the Category matrix at the level the new Category will be created to hold the new Category\n1.6. The available options in the Material, Finish, Color and Features selectors should be the ones defined for the selected department (see Manage Attributes and Details)\n1.7. The fields and available options under the Details section should be the ones defined for the selected category (see Manage Attributes and Details)\n1.8. When a Stock Item Category is created, a corresponding item is added to QuickBooks POS\n1.8.1. The ID of the item in POS is set to the Category‟s Unique Tag\n1.8.2. The initial item quantity in POS is set to zero\n2. Edit Category\n2.1. The following fields are mandatory:\n2.1.1. Unique Item Category\n2.1.1.1. Name\n2.1.1.2. Unique Tag\n2.1.2. Stock Item Category\n2.1.2.1. Name\n2.1.2.2. Unique Tag\n2.1.2.3. Price\n2.2. The Category Name must be unique across the inventory\n2.3. The Category‟s Unique Tag must be unique across the inventory\n2.4. The Unique Tag must be at most 18 characters long\n2.5. The available options in the Material, Finish, Color and Features selectors should be the ones defined for the selected department (see Manage Attributes and Details)\n2.6. The fields and available options under the Details section should be the ones defined for the selected category (see Manage Attributes and Details)\n2.7. When a Stock Item Category is updated, the corresponding item is updated in QuickBooks POS\n2.7.1. The ID of the item in POS is set to the Category‟s Unique Tag\n2.7.2. The initial item quantity in POS is set to zero\n2.8. Generic categories and Under $5 item categories are generated automatically by the system and cannot be modified\n3. Delete Category\n3.1. When a Category is deleted, all of its items should be moved to the parent category\n3.2. The system must ask for confirmation before deleting a Category\n3.3. Generic item categories and Under $5 item categories are generated automatically by the system and cannot be deleted\n4. Move Categories\n4.1. The Categories to Move selector is populated with the categories seen on the matrix at the level where the Move Categories button was pressed.\n4.2. User must select at least one Category to move\n4.3. User must select either an existing or new target Department or Category\n4.4. User cannot move categories to any Departments or Categories that don‟t have enough slots available in the matrix to hold the moved categories\n4.5. User cannot move categories to any of their subcategories (cannot create loops in the inventory hierarchy)\n4.6. If a new target Category is selected\n4.6.1. User must enter\n4.6.1.1. Name\n4.6.1.2. Unique Tag\n4.6.1.3. Parent Department or Category of the new Category\n4.6.2. The Category is created as a Unique Item Category\n4.7. User cannot select a Stock Item, Under $5 Category or Generic Category as the target Category\n4.8. When a Category is moved it keeps its assigned Item Details\n4.9. When the option to merge the contents of the selected Categories is selected, the Item Details assigned to the selected Categories are combined and assigned to the target Department or Category\n4.10. When the option to merge the contents of the selected Categories is selected, the moved items must be updated in QuickBooks POS\n3.3.7. Post-Condition(s):\n1. Add Category\n1.1. The new Category is added\n2. Edit Category\n2.1. The Category is updated\n3. Delete Category\n3.1. The Category is deleted\n4. Move Categories\n4.1. If the „move to a new Category‟ option is selected, a new Category is created\n4.2. If the „move categories and make them children‟ option is selected, the selected Categories are moved to the selected target location\n4.3. If the „merge contents of selected categories‟ option is selected, the contents of the selected Categories are moved to the selected target location\n3.3.8. Open Issues:\nNone\n3.3.9. Extension Points:\nNone\n3.3.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.3 – Manage Categories\n\nactor \"Administrator\" as Admin\nparticipant \"Inventory System\" as System\n\n== Add Category ==\nAdmin -> System : 1.1 Navigate to a Department or Category\nref over Admin, System: See View Inventory\nactivate System\nSystem -> Admin : 1.2 Display Add Category buttons (Unique Item, Stock Item)\nAdmin -> System : 1.3 Click desired Add Category button\nSystem -> Admin : 1.4 Display screen for Category type\n\nalt Normal Case\n    Admin -> System : 1.5 Enter Category data\n    System -> System : 1.6 Validate Category data\n    alt Data valid\n        System -> System : 1.7 Add Category to inventory\n        System -> Admin : 1.8 Return to parent Department or Category\n    else Data invalid\n        System -> Admin : Error: Invalid Category data\n    end\nelse Cancels Category add\n    Admin -> System : Cancels Category add\n    System -> Admin : Return to parent Department or Category\nend\ndeactivate System\n\n== Edit Category ==\nAdmin -> System : 2.1 Navigate to a Category\nref over Admin, System: See View Inventory\nactivate System\nSystem -> Admin : 2.2 Display Edit Category button\nAdmin -> System : 2.3 Click Edit Category button\nSystem -> Admin : 2.4 Display screen for Category type\n\nalt Normal Case\n    Admin -> System : 2.5 Edit Category data\n    System -> System : 2.6 Validate Category data\n    alt Data valid\n        System -> System : 2.7 Update Category information\n        System -> Admin : 2.8 Return to Category screen\n    else Data invalid\n        System -> Admin : Error: Invalid Category data\n    end\nelse Cancels Category edit\n    Admin -> System : Cancels Category edit\n    System -> Admin : Return to Category screen\nend\ndeactivate System\n\n== Delete Category ==\nAdmin -> System : 3.1 Navigate to a Category\nref over Admin, System: See View Inventory\nactivate System\nSystem -> Admin : 3.2 Display Edit Category button\nAdmin -> System : 3.3 Click Edit Category button\nSystem -> Admin : 3.4 Display screen for Category type\n\nalt Normal Case\n    Admin -> System : 3.5 Click Delete Category button\n    System -> System : 3.6 Validate Category deletion\n    alt Deletion valid\n        System -> System : 3.7 Remove Category from inventory\n        System -> Admin : 3.8 Return to parent Department or Category\n    else Deletion invalid\n        System -> Admin : Error: Cannot delete Category\n    end\nelse Cancels Category deletion\n    Admin -> System : Cancels Category deletion\n    System -> Admin : Return to Category screen\nend\ndeactivate System\n\n== Move Categories ==\nAdmin -> System : 4.1 Navigate to a Department or Category\nref over Admin, System: See View Inventory\nactivate System\nSystem -> Admin : 4.2 Display Move Categories button\nAdmin -> System : 4.3 Click Move Categories button\nSystem -> Admin : 4.4 Display Move Categories screen\n\nalt Normal Case\nAdmin -> System : 4.5 Select Categories to move\nAdmin -> System : 4.6 Select target location (existing or new Category)\n\nalt New Category\n    Admin -> System : 4.6.2.1 Selects Parent Department or Category of New Category\n    Admin -> System : 4.6.2.2 Enter new Category data\nend\n\nAdmin -> System : 4.7 Select type of move (Move, Merge)\nSystem -> System : 4.8 Validate move data\n\nalt Move valid\n    System -> System : 4.9 Perform move\n    System -> Admin : 4.10 Return to parent Department or Category\nelse Move invalid\n    System -> Admin : Error: Invalid move\nend\n\nelse Cancels move\n    Admin -> System : Cancels move\n    System -> Admin : Return to parent Department or Category\nend\ndeactivate System\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v4_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.4. Manage Attributes and Details\nThe system should allow inventory administrators to customize the attributes and details available for each inventory item. Attributes can be defined for each department, and details can be defined for each department and/or category\n3.4.1. Actor(s): Administrator\n3.4.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.4.3. Use Case Dependencies\n1. View Inventory\n3.4.4. Basic Flows:\n1. View Item Attributes\n1.1. User accesses the main inventory screen\n1.2. System displays the Edit Attributes button\n1.3. User clicks the Edit Attributes button\n1.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments\n1.5. Optionally, user filters view by attribute status (active, inactive, all)\n1.6. User clicks the Done button\n1.7. User is taken back to the main inventory screen\n2. View Item Details\n2.1. User accesses the main inventory screen\n2.2. System displays the Edit Details button\n2.3. User clicks the Edit Details button\n2.4. System displays the Edit Details screen which displays all existing item details and their detail x department and category assignments\n2.5. Optionally, user filters view by detail status (active, inactive, all)\n2.6. User clicks the Done button\n2.7. User is taken back to the main inventory screen\n3. Edit Item Attributes\n3.1. User accesses the main inventory screen\n3.2. System displays the Edit Attributes button\n3.3. User clicks the Edit Attributes button\n3.4. System displays the Edit Attributes screen which displays all existing item attributes and their attribute x department assignments\n3.5. Optionally, user filters view by attribute status (active, inactive, all)\n3.6. User edits attributes\n3.6.1. User changes attribute x department assignments\n3.6.2. User changes attribute data\n3.6.3. User changes attribute active x inactive status\n3.6.4. User creates new attribute\n3.6.5. System validates the attribute data\n3.6.6. System updates the Item Attribute information\n3.7. User clicks the Done button\n3.8. User is taken back to the main inventory screen\n4. Edit Item Details\n4.1. User accesses the main inventory screen\n4.2. System displays the Edit Details button\n4.3. User clicks the Edit Details button\n4.4. System displays the Edit Details screen which displays all existing item details and their detail x department and category assignments\n4.5. Optionally, user filters view by detail status (active, inactive, all)\n4.6. User edits details\n4.6.1. User changes detail x department or category assignments\n4.6.2. User changes detail data\n4.6.3. User changes detail active x inactive status\n4.6.4. User creates new detail\n4.6.5. System validates the detail data\n4.6.6. System updates the Item detail information\n4.7. User clicks the Done button\n4.8. User is taken back to the main inventory screen\n3.4.5. Alternative Flows:\n1. View Item Attributes\nNone\n2. View Item Details\nNone\n3. Edit Item Attributes\n3.1. User cancels the Item Attribute edit and is taken back to the main inventory screen\n3.2. During data validation, data is deemed invalid and an error message is presented to the user\n4. Edit Item Details\n4.1. User cancels the Item Detail edit and is taken back to the main inventory screen\n4.2. During data validation, data is deemed invalid and an error message is presented to the user\n3.4.6. Business Rules:\n1. View Item Attributes\nNone\n2. View Item Details\nNone\n3. Edit Item Attributes\n3.1. The following fields are mandatory:\n3.1.1. Name\n3.2. The Item Attribute Name must be unique across the inventory\n3.3. The De-Activate Attribute button is replaced with an Activate Attribute button when the attribute is inactive\n3.4. Material and Features attributes can be assigned to any combination of departments\n3.5. Material and Features attributes can be assigned to „All‟ departments\n3.6. Color and Finish attributes can only be set to „All‟ departments\n3.7. An Attribute cannot be set simultaneously to „All‟ departments and to specific department(s)\n3.7.1. Assigning an attribute to „All‟ departments disables the individual department selectors, but preserves the current department selections\n3.7.2. Un-assigning an attribute from the „All‟ departments enables the individual department selectors, restoring the previous department selections\n4. Edit Item Details\n4.1. The available detail types are:\n4.1.1. Number\n4.1.2. Text\n4.1.3. Selection\n4.2. The following fields are mandatory:\n4.2.1. Name\n4.2.2. Type\n4.3. If the Type is set to „Selection‟, then the selection list must contain at least one item\n4.4. The Item Detail Name must be unique across the inventory\n4.5. The De-Activate Detail button is replaced with an Activate Detail button when the detail is inactive\n4.6. Details can be assigned to any combination of departments and categories\n4.7. Details can be assigned to „All‟ departments and/or categories\n4.8. Assigning a detail to a department or category automatically assigns it to its subcategories\n4.8.1. Assignments automatically made by the system can be changed by the user\n3.4.7. Post-Condition(s):\n1. View Item Attributes\nNone\n2. View Item Details\nNone\n3. Edit Item Attributes\n3.1. The Item Attributes are updated\n4. Edit Item Details\n4.1. The Item Details are updated\n3.4.8. Open Issues:\nNone\n3.4.9. Extension Points:\nNone\n3.4.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.4 – Manage Attributes and Details\n\nactor \"Administrator\" as Admin\nparticipant \"Inventory System\" as System\n\n== View Item Attributes ==\nAdmin -> System : 1.1 Access main inventory screen\nactivate System\nSystem -> Admin : 1.2 Display Edit Attributes button\nAdmin -> System : 1.3 Click Edit Attributes button\nSystem -> Admin : 1.4 Display Edit Attributes screen\nopt Filter view\nAdmin -> System : 1.5 Filter view by attribute status(active, inactive, all)\nend\nAdmin -> System : 1.6 Click Done button\nSystem -> Admin : 1.7 Return to main inventory screen\ndeactivate System\n\n== View Item Details ==\nAdmin -> System : 2.1 Access main inventory screen\nactivate System\nSystem -> Admin : 2.2 Display Edit Details button\nAdmin -> System : 2.3 Click Edit Details button\nSystem -> Admin : 2.4 Display Edit Details screen\nopt Filter view\nAdmin -> System : 2.5 Filter view by attribute status(active, inactive, all)\nend\nAdmin -> System : 2.6 Click Done button\nSystem -> Admin : 2.7 Return to main inventory screen\ndeactivate System\n\n== Edit Item Attributes ==\nAdmin -> System : 3.1 Access main inventory screen\nactivate System\nSystem -> Admin : 3.2 Display Edit Attributes button\nAdmin -> System : 3.3 Click Edit Attributes button\nSystem -> Admin : 3.4 Display Edit Attributes screen\nopt Filter view\nAdmin -> System : 3.5 Filter view by attribute status(active, inactive, all)\nend\n\nalt Normal Case\n    Admin -> System : 3.6 Edit attributes\n    Admin -> System : 3.6.1 Change attribute x department assignments\n    Admin -> System : 3.6.2 Change attribute data\n    Admin -> System : 3.6.3 Change attribute active/inactive status\n    Admin -> System : 3.6.4 Create new attribute\n    System -> System : 3.6.5 Validate attribute data\n    alt Data valid\n        System -> System : 3.6.6 Update Item Attribute information\n        Admin -> System : 3.7 Click Done button\n        System -> Admin : 3.8 Return to main inventory screen\n    else Data invalid\n        System -> Admin : Error: Invalid attribute data\n    end\nelse Cancels Item Attribute edit\n    Admin -> System : Cancels edit\n    System -> Admin : Return to main inventory screen\nend\ndeactivate System\n\n== Edit Item Details ==\nAdmin -> System : 4.1 Access main inventory screen\nactivate System\nSystem -> Admin : 4.2 Display Edit Details button\nAdmin -> System : 4.3 Click Edit Details button\nSystem -> Admin : 4.4 Display Edit Details screen\nopt Filter view\nAdmin -> System : 3.5 Filter view by attribute status(active, inactive, all)\nend\n\nalt Normal Case\n    Admin -> System : 4.6 Edit details\n    Admin -> System : 4.6.1 Change detail x department/category assignments\n    Admin -> System : 4.6.2 Change detail data\n    Admin -> System : 4.6.3 Change detail active/inactive status\n    Admin -> System : 4.6.4 Create new detail\n    System -> System : 4.6.5 Validate detail data\n    alt Data valid\n        System -> System : 4.6.6 Update Item Detail information\n        Admin -> System : 4.7 Click Done button\n        System -> Admin : 4.8 Return to main inventory screen\n    else Data invalid\n        System -> Admin : Error: Invalid detail data\n    end\nelse Cancels Item Detail edit\n    Admin -> System : Cancels edit\n    System -> Admin : Return to main inventory screen\nend\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v5_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.5. Add Item to Inventory\nItems are typically added to the inventory as part of the donation processes. This is called adding an item in donation processing. Alternatively, items can be added during routine inventory maintenance. This is called adding an item in inventory management mode.\n3.5.1. Actor(s): Administrator Director Manager Receiving Associate Pickup Associate Decon Associate Customer Service Representative\n3.5.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.5.3. Use Case Dependencies\n1. View Inventory\n2. Suggest Item Price\n3. Manage Attributes and Details\n4. Receive Acquisition\n3.5.4. Basic Flows:\n1. User accesses the main inventory screen\n5. The screen displays all inventory departments in matrix format (see View Inventory)\n2. User drills down to the appropriate category for the item\n2.1. If in donation processing mode, the item entry screen is presented automatically\n2.2. If in inventory management mode, the list of existing inventory items in that category is displayed\n2.2.1. User clicks the Add Item button\n3. The appropriate item entry screen is presented\n4. User fills in item information\n5. User confirms the addition of the new item\n6. Inventory is updated\n7. System gives the option of printing an item tag\n8. User prints item tag(s)s for unique or stock item(s)\n9. User attaches tag(s) to the item(s)\n3.5.5. Alternative Flows:\n1. At any point, the user may click on a department on the inventory department shortcuts list, which takes the user to the inventory view for that particular department.\n2. At any point while in the item add screen, the user may cancel the operation.\n3.5.6. Business Rules:\n1. When navigating to the desired item category, departments and categories are displayed according to the rules defined in View Inventory\n2. Items can be added at any level in the categorized inventory\n3. Only unique and stock items are tracked by the inventory system\n3.1. Only unique and stock items are available to be added in inventory management mode\n3.2. Under $5 items can only be added in donation processing mode\n3.2.1. Information about Under $5 items is only added for the purpose of generating the donation receipt\n4. When an item is added to the inventory, the system updates QuickBooks POS accordingly and promptly\n4.1. A new item entry is created in POS for a unique item\n4.2. The item category name in POS is set to XXXXXXXXXXXXXXXXXX-NNNNNNNNNNN, where XXXXXXXXXXXXXXXXXX is the category‟s Unique Tag and NNNNNNNNNNN is a sequential, system–generated number\n4.3. The item quantity is updated for a stock item\n5. Mandatory fields:\n5.1. Unique items\n5.1.1. Quantity\n5.1.2. Condition\n5.1.3. Price\n5.1.4. Description, if the selected category is a generic category\n5.2. Stock items\n5.2.1. None – all fields are pre-set and cannot be modified\n5.3. Under $5 items\n5.3.1. Description\n6. The Category field is a link to the inventory matrix view, which allows you to select a new category by drilling down to any existing category\n7. The available options in the Material, Finish, Color and Features selectors should be the ones defined for the selected department (see Manage Attributes and Details)\n8. The fields and available options under the Details section should be the ones defined for the selected category (see Manage Attributes and Details)\n9. For Stock Items, all fields are pre-set and disabled, and cannot be changed\n10. For Unique Items, all fields with values defined when the Unique Item category was created are pre-set and cannot be changed\n11. For unique and stock items, the system makes pricing recommendations to the user on the item entry screen (see Suggest Item Price)\n11.1. For unique items, user can accept the suggested price, enter a different one, or leave it blank\n11.1.1. The item price can only be left blank during the processing of an acquisition. The price has to be set before the item can be added to the inventory\n11.2. For stock items, the price is pre-set and the user cannot change it\n12. Receiving Associates and Pickup and Decon Associates can only add items to the inventory as part of processing a donation (see Receive Acquisition)\n13. Pickup and Decon Associates can access the screen and enter all item information, but they cannot complete the add operation and add the item into the inventory.\n14. The item tag, which could be an RFID tag, should contain the following information:\n14.1. CJ logo\n14.2. Department name\n14.3. Category name\n14.4. Item description\n14.5. Condition\n14.6. Size (with units)\n14.7. Price (with indication if item is being sold on consignment)\n14.8. Item number and bar code\n14.9. Acquisition number\n14.10. Date received\n3.5.7. Post-Condition(s):\n1. Item is present in the Inventory Management System\n2. Unique and stock items have item tags\n3. In the case of a unique item, item is added to QuickBooks POS\n4. In the case of a stock item, item quantity is updated in QuickBooks POS\n3.5.8. Open Issues:\nNone\n3.5.9. Extension Points:\nNone\n3.5.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.5 – Add Item to Inventory\n\nactor \"User\" as User\nparticipant \"Inventory System\" as System\n\n== Access Inventory ==\nUser -> System : 1. Access main inventory screen\nactivate System\nSystem -> User : 1.1 Display inventory departments in matrix format\ndeactivate System\n\n== Drill Down to Category ==\nUser -> System : 2. Drill down to the appropriate category\nactivate System\nalt Donation Processing Mode\n    System -> User : 2.1 Display item entry screen\nelse Inventory Management Mode\n    System -> User : 2.2 Display list of existing items\n    User -> System : 2.2.1 Click Add Item button\n    System -> User : Display item entry screen\nend\ndeactivate System\n\n== Add Item ==\nUser -> System : 3. Fill in item information\nactivate System\nalt Unique Item\n    User -> System : Enter Quantity, Condition, Price, Description\n    System -> System : Validate item data\n    alt Data valid\n        System -> System : Add unique item to inventory\n        System -> System : Update QuickBooks POS with new item\n    else Data invalid\n        System -> User : Error: Invalid item data\n    end\nelse Stock Item\n    System -> User : Fields pre-set and disabled\n    System -> System : Update stock item quantity in inventory and POS\nelse Under $5 Item\n    User -> System : Enter Description\n    System -> System : Add item for donation receipt\nend\ndeactivate System\n\n== Confirm and Tag ==\nUser -> System : 5. Confirm addition of item\nactivate System\nSystem -> User : 7. Option to print item tag\nUser -> System : Print item tag(s)\nUser -> User : Attach tag(s) to item(s)\n\ndeactivate System\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v6_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.6. Manage Inventory Items\nThe system should allow various management actions to be performed on items existing in the inventory. These include modifying, deleting and splitting an item, and viewing the item‟s details and item history. These actions are only available for Unique and Stock items.\n3.6.1. Actor(s): Administrator Director Manager\n3.6.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.6.3. Use Case Dependencies\n1. View Inventory\n2. Add Item to Inventory\n3. Suggest Item Price\n3.6.4. Basic Flows:\n1. Modify Inventory Item\n1.1. User accesses the main inventory screen\n1.2. The screen displays all inventory departments in matrix format with option to select and/or edit items to move them to a new department/category\n1.3. User drills down to the desired existing inventory item (see View Inventory)\n1.4. The item detail screen is presented\n1.5. User modifies item information\n1.6. The system validates item information\n1.7. Item information is updated in the inventory\n1.8. System gives the option of re-printing then item tag\n1.9. User optionally re-prints the item tag and attaches it to the item\n2. Adjust Item Quantity\n2.1. User accesses the main inventory screen\n2.2. The screen displays all inventory departments in matrix format\n2.3. User drills down to the desired existing inventory item (see View Inventory)\n2.4. The item detail screen is presented\n2.5. User changes the item quantity\n2.6. The system displays a confirmation screen where a reason for the adjustment must be specified by the user\n2.7. The system validates the item change\n2.8. Item information is updated in the inventory\n3. Split Inventory Item\n3.1. User accesses the main inventory screen\n3.2. The screen displays all inventory departments in matrix format\n3.3. User drills down to the desired existing inventory item (see View Inventory)\n3.4. The item detail screen is presented\n3.5. User clicks the Split Item button\n3.6. The system displays the Item Split screen\n3.7. User builds the list of items that the original item will be split into\n3.7.1. User can clone the original item to add new item(s) to the list that have similar attributes as the original item\n3.7.2. User can add new items to the list by selecting Unique and Stock categories in the same way as adding a new item to the inventory (see Add Item to Inventory)\n3.8. Once the list is complete, user confirms the split\n3.9. The system validates the split\n3.10. Item information is updated in the inventory\n3.10.1. The original (split) item is updated in the inventory\n3.10.2. Any new items that were added to the split list are added to the inventory maintaining parental history\n4. View Inventory Item History\n4.1. User accesses the main inventory screen\n4.2. The screen displays all inventory departments in matrix format\n4.3. User drills down to the desired existing inventory item (see View Inventory)\n4.4. The item detail screen is presented\n4.5. User clicks the Item History button\n4.6. The system displays the Item History screen containing current and historical information about the inventory item\n3.6.5. Alternative Flows:\n1. Modify Inventory Item\n1.1. User cancels the operation and is taken back to the item selection screen\n1.2. During data validation, data is deemed invalid and an error message is presented to the user\n2. Adjust Item Quantity\n2.1. User cancels the operation and is taken back to the item selection screen\n2.2. During data validation, data is deemed invalid and an error message is presented to the user\n3. Split Inventory Item\n3.1. User cancels the operation and is taken back to the item selection screen\n3.2. During data validation, data is deemed invalid and an error message is presented to the user\n4. View Inventory Item History\nNone\n3.6.6. Business Rules:\n1. Modify Inventory Item\n1.1. All item properties available when the item was originally added to the inventory can be modified, except for the system-generated item number (see Add Item to Inventory).\n1.2. The business rules defined for adding a new item into the inventory are also applicable to modifying an existing inventory item (see Add Item to Inventory).\n1.3. Once set for the first time in the inventory, the item price can only be modified by a Manager, Director or Administrator, must maintain a history and include an explanation for the price change\n1.4. Changes to the item in the inventory should be reflected in the corresponding item in QuickBooks POS\n2. Adjust Item Quantity\n2.1. When an item is updated, the system must automatically detect that the item quantity has been modified and present the adjustment confirmation screen\n2.2. If the quantity is decreased, a reason for the change is required\n2.2.1. Valid reasons for are:\n2.2.1.1. Scraped\n2.2.1.2. Given Away (free bin)\n2.2.1.3. Discarded\n2.2.1.4. Broken\n2.2.1.5. Shrinkage (stolen or lost)\n2.2.1.6. Correction (data entry mistake)\n2.2.1.7. Other (please explain)\n2.2.2. If the „Other‟ reason is selected, the user must enter an additional comment\n2.3. If the quantity is increased, the user must enter a comment describing the reason for the change\n2.4. Changes to an item‟s quantity in the inventory should be reflected in the corresponding item in QuickBooks POS\n3. Split Inventory Item\n3.1. When building the split item list, at least two items must exist in the list, including the original item\n3.2. When building the split item list, the business rules defined for adding a new item into the inventory are also applicable (see Add Item to Inventory).\n3.3. Clicking the Clone button on a row adds a new item row with the same item values as the original, except for the item number, which is left blank\n3.4. Clicking the Add Item button takes the user through the inventory matrix so that a category can be selected for the new item. The user is then taken to the View/Update Item screen\n3.5. Clicking the category name for an item takes the user to the View/Update Item screen for that item\n3.6. All items in the split item list are saved in the inventory when the user confirms the split\n3.6.1. The original item is updated\n3.6.2. The new items are added to the inventory\n3.6.3. New items added to the inventory as part of a split item operation contain a reference to the original item they were split from\n4. View Inventory Item History\n4.1. The system should record the following actions and associated parameters for every item in the inventory and display them on the item history screen, along with action date/time:\n4.1.1. Item added to inventory: Initial quantity, user and original (parent) item number if this item was created as part of a split\n4.1.2. Item price set: Initial price and user\n4.1.3. Item price changed: New price and user\n4.1.4. Item sold: Sale price and quantity\n4.1.5. Quantity adjusted: Adjusted quantity, user and reason if quantity decreased\n4.1.6. Item split: Item numbers of the new items added as part of the split and user\n3.6.7. Post-Condition(s):\n1. Modify Inventory Item\n1.1. Item is updated in the inventory\n1.2. Item is updated in QuickBooks POS\n2. Adjust Item Quantity\n2.1. Item is updated in the inventory\n2.2. Item is updated in QuickBooks POS\n3. Split Inventory Item\n3.1. Original item is updated in the inventory\n3.2. Original item is updated in QuickBooks POS\n3.3. New items are updated in the inventory\n3.4. New items are updated in QuickBooks POS\n4. View Inventory Item History\nNone\n3.6.8. Open Issues:\nNone\n3.6.9. Extension Points:\nNone\n3.6.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.6 – Manage Inventory Items\n\nactor \"User\" as User\nparticipant \"Inventory System\" as System\n\n== Modify Inventory Item ==\nUser -> System : 1.1 Access main inventory screen\nactivate System\nSystem -> User : 1.2 Display inventory departments (matrix format)\nUser -> System : 1.3 Drill down to desired item\nref over User, System: See View Inventory\nSystem -> User : 1.4 Display item detail screen\nUser -> System : 1.5 Modify item information\nSystem -> System : 1.6 Validate item information\nalt Data valid\n    System -> System : 1.7 Update item in inventory\n    System -> System : Update item in QuickBooks POS\n    System -> User : 1.8 Option to reprint item tag\n    opt Reprint tag\n        User -> System : Print item tag\n    end\nelse Data invalid\n    System -> User : Error: Invalid item data\nend\ndeactivate System\n\n== Adjust Item Quantity ==\nUser -> System : 2.1 Access main inventory screen\nactivate System\nSystem -> User : 2.2 Display inventory departments (matrix format)\nUser -> System : 2.3 Drill down to desired item\nref over User, System: See View Inventory\nSystem -> User : 2.4 Display item detail screen\nUser -> System : 2.5 Change item quantity\nSystem -> User : 2.6 Display confirmation screen (reason required)\nUser -> System : Enter reason for adjustment\nSystem -> System : 2.7 Validate item change\nalt Data valid\n    System -> System : 2.8 Update item quantity in inventory\n    System -> System : Update item quantity in QuickBooks POS\nelse Data invalid\n    System -> User : Error: Invalid quantity data\nend\ndeactivate System\n\n== Split Inventory Item ==\nUser -> System : 3.1 Access main inventory screen\nactivate System\nSystem -> User : 3.2 Display inventory departments (matrix format)\nUser -> System : 3.3 Drill down to desired item\nref over User, System: See View Inventory\nSystem -> User : 3.4 Display item detail screen\nUser -> System : 3.5 Click Split Item button\nSystem -> User : 3.6 Display Item Split screen\nalt Clone original item\n    User -> System : 3.7.1 Clone item to add similar attributes\nelse Add new item\n    User -> System : 3.7.2 Select Unique or Stock category\n    ref over User, System: See Add Item to Inventory\nend\nUser -> System : 3.8 Confirm split\nSystem -> System : 3.9 Validate split\nalt Split valid\n    System -> System : 3.10 Update original item\n    System -> System : Add new items to inventory (with history)\n    System -> System : Update QuickBooks POS\nelse Split invalid\n    System -> User : Error: Invalid split configuration\nend\ndeactivate System\n\n== View Inventory Item History ==\nUser -> System : 4.1 Access main inventory screen\nactivate System\nSystem -> User : 4.2 Display inventory departments (matrix format)\nUser -> System : 4.3 Drill down to desired item\nref over User, System: See View Inventory\nSystem -> User : 4.4 Display item detail screen\nUser -> System : 4.5 Click Item History button\nSystem -> User : 4.6 Display item history screen (current and historical data)\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v7_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.7. Suggest Item Price\nThe system should assist in the task of pricing a new inventory item by making pricing suggestions to the user when adding to or modifying an item in the inventory. The suggested prices should be calculated based on the original and sale prices of similar items that currently exist or existed in the inventory in the past.\n3.7.1. Actor(s): Administrator Director Manager Customer Service Representative Receiving Associate Pickup Associate Decon Associate\n3.7.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.7.3. Use Case Dependencies\n1. Add Item to Inventory\n2. Manage Inventory Items\n3.7.4. Basic Flows:\n1. User accesses the inventory entry screen (see Add Item to Inventory, Manage Inventory Items)\n2. System shows price recommendations based on current item data and default price suggestion configuration options\n3. User modifies item data\n4. System makes new price suggestions based on new item data\n3.7.5. Alternative Flows:\n1. User changes price suggestion configuration options\n2. System shows new price recommendations based on current item data and new configuration options\n3.7.6. Business Rules:\n1. Price suggestion is only applicable to Unique items\n2. By default, price suggestion considers historical data for items of the same:\n2.1. Department\n2.2. Category\n2.3. Condition\n3. The following price suggestion configuration parameters are available:\n3.1. Number of months of historical price information to include when calculating price recommendations. Available options:\n3.1.1. Six Months\n3.1.2. Twelve Months\n3.1.3. All (include all historical pricing data with no time restriction)\n3.2. Whether or not to include item attributes when finding items of similar characteristics\n3.2.1. When user chooses to include item attributes for item matching, user can specify which attributes to consider\n4. System displays the following price recommendation information:\n4.1. For unique items:\n4.1.1. Historical original item price information:\n4.1.1.1. Lowest price\n4.1.1.2. Mean price\n4.1.1.3. Highest price\n4.1.2. Historical sale price information\n4.1.2.1. Lowest price\n4.1.2.2. Mean price\n4.1.2.3. Highest price\n4.1.3. Number of items evaluated when calculating the amounts above\n5. For stock items\n5.1.1. System shows the pre-determined price for this stock item, set when the stock item category was created\n3.7.7. Post-Condition(s):\n1. Price suggestion information is displayed on the screen\n3.7.8. Open Issues:\nNone\n3.7.9. Extension Points:\nNone\n3.7.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.7 – Suggest Item Price\n\nactor \"User\" as User\nparticipant \"Inventory System\" as System\n\n== Access Inventory Entry Screen ==\nUser -> System : 1. Access inventory entry screen\nref over User, System: See Add Item to Inventory, Manage Inventory Items\nactivate System\nSystem -> User : 2. Display price recommendations based on current item data and default config options\ndeactivate System\n\n== Modify Item Data ==\nUser -> System : 3. Modify item data\nactivate System\nalt Change Price Suggestion Config\nUser -> System : Change price suggestion configuration options\nSystem -> User : Show new price recommendations based on updated config\nend\n\nSystem -> User : 4. Display new price suggestions based on updated item data\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v8_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.8. View Acquisitions\nAcquisition records for Drop-Off, Pickup and Decon donations are created in the CRM system. Inventory Management users should be able to view all past and current acquisitions. Receiving Associates use this function to locate an expected acquisition when receiving a donation at the loading dock. Pickup and Decon crews may also use this function to initiate the process of receiving items while in the truck, on their way to the receiving dock.\nDrop Off acquisitions are not typically pre-scheduled as Pick Up and Decon acquisitions except for those submitted through the organizational website. As such, when a donor arrives with an unexpected drop off donation, a new acquisition needs to be able to be created in the CRM system first, at either the customer service desk or at the dock, before it can be viewed in the acquisitions screen.\n3.8.1. Actor(s): Administrator Director Manager Customer Service Representative Receiving Associate Pick Up Associate Decon Associate\n3.8.2. Assumptions, Pre-Conditions & Triggers:\n1. User is logged into the system\n3.8.3. Use Case Dependencies\nNone\n3.8.4. Basic Flows:\n1. User accesses the acquisitions screen\n2. The screen displays a list of all acquisitions, latest ones at the top of the list\n3. User may optionally filter the acquisitions displayed on the screen by changing filtering options\n4. User clicks on an acquisition record\n5. System display the details for that acquisition, including expected items\n3.8.5. Alternative Flows:\n1. Drop Off acquisitions\n1.1. User may alternatively click the New Drop Off button on the acquisition list screen which redirects the user to the CRM acquisition creation screen\n1.2. User creates new Drop Off acquisition in the CRM system\n1.3. User returns to the acquisitions screen and sees the newly created Drop Off acquisition\n2. User can use a bar code scanner to scan the acquisition ticket generated at customer service\n3.8.6. Business Rules:\n1. The acquisitions screen should display:\n1.1. Acquisition Number\n1.2. Type\n1.2.1. Drop Off\n1.2.2. Pick Up\n1.2.3. Decon\n1.2.4. Donor Name with Zip Code\n1.2.5. Primary Contact Name\n1.2.6. Primary Contact Phone Number\n1.2.7. Start Date\n1.2.8. End Date\n1.2.9. Status\n1.2.9.1. Expected\n1.2.9.2. Partially Received\n1.2.9.3. Completed\n2. Users should be able to filter (on multiple fields simultaneously ) acquisitions by:\n2.1. Type\n2.2. Donor and Primary Contact Name\n2.3. Acquisition Number\n2.4. Primary Contact Phone Number\n2.5. Status\n3. User should be able to sort the acquisition list by any of its columns\n4. The default sorting is by descending order of acquisition End Date\n5. Changes to acquisition information in CRM should be immediately visible in the Inventory Management System.\n6. Changes to acquisition information in the Inventory Management System should be immediately visible in CRM.\n7. CRM should allow the creation of a Drop Off acquisition where only a Zip Code and Donation Location Type or Donor Type are provided.\n8. All acquisitions are created in CRM.\n9. The system should provide a link from the acquisitions view in the Inventory Management System to the acquisition creation screen in CRM for easy access.\n10. Inventory Management users should be granted permission to create new Drop Off acquisitions in CRM in order to access that functionality.\n3.8.7. Post-Condition(s):\nNone\n3.8.8. Open Issues:\nNone\n3.8.9. Extension Points:\nNone\n3.8.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.8 – View Acquisitions\n\nactor \"User\" as User\nparticipant \"Inventory System\" as System\nparticipant \"CRM System\" as CRM\n\nUser -> System : 1. Access acquisitions screen\nactivate System\n\nalt Create Drop Off Acquisition\nUser -> System : Click 'New Drop Off' button\nSystem -> CRM : Redirect user to CRM acquisition creation screen\nactivate CRM\nUser -> CRM : Create new Drop Off acquisition\nCRM -> System : Update acquisition list with new Drop Off record\ndeactivate CRM\nUser -> System : Return to acquisitions screen\nend\n\nalt Scan Acquisition Ticket\nUser -> System : Scan acquisition ticket (bar code scanner)\nend\n\nSystem -> User : 2. Display list of all acquisitions (latest at top)\ndeactivate System\n\nopt Filter acquisitions\nUser -> System : 3. Apply filtering options\nactivate System\nSystem -> User : Display filtered acquisitions\nend\ndeactivate System\n\nUser -> System : 4. Click on an acquisition record\nactivate System\nSystem -> User : 5. Display acquisition details (including expected items)\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "2009 - inventory 2.0_v9_Reference.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\n3.9. Receive Acquisition\nA donor in possession of a valid acquisition number can proceed to the receiving dock where the items to be donated will be received and processed, and a donation receipt will be generated. Alternatively, a donor may go directly to the receiving dock, in which case a new acquisition is created by the Receiving Associate before items can be received and processed.\nThe screens used for the acquisition process should simplify and expedite the data entry process, allowing the Receiving Associate to enter only the information needed to generate the donation receipt. Additional attributes needed to complete the item information and effectively add the item to the inventory can be added at a second step, after the receipt has been printed and the donor has been served. The Receiving Associate can print temporary acquisition labels for items that require further processing.\nPick Up and Decon crews may also initiate the receiving process, entering as much detailed information about the donated items as desired, and generating a donation receipt. They cannot, however, add items to the inventory or complete the acquisition process. A Receiving Associate is required to review all the acquisition information before those actions can take place.\n3.9.1. Actor(s): Donor / Primary Contact Administrator Director Manager Customer Service Representative Receiving Associate Pick Up Associate Decon Associate\n3.9.2. Assumptions, Pre-Conditions & Triggers:\n1. An acquisition has been created for this donation in CRM and exists in the system in the Expected state.\n3.9.3. Use Case Dependencies\n1. View Acquisitions\n2. Add Item to Inventory\n3.9.4. Basic Flows:\n1. Donor or Primary Contact arrives at receiving dock with a valid donation number\n2. Receiving Associate locates donation request in the system (see View Acquisitions)\n3. System displays donation request information\n4. Receiving Associate enters information about each donated item into the donation request (see Add Item to Inventory)\n4.1. A new item can be added to the list by cloning an existing item\n4.2. A new item can be added by clicking the Add Item button\n4.3. An item can be removed by setting the received quantity to zero\n5. Receiving Associate prints a donation receipt\n6. Receiving Associate optionally writes information to the receipt by hand such as condition\n7. Donation receipt is given to the Donor or Primary Contact\n8. Receiving Associate prints item tags for unique and stock items (see Add Item to Inventory)\n9. Receiving Associate attaches printed tags to corresponding items\n10. Receiving Associate closes donation request\n3.9.5. Alternative Flows:\n1. Items can be set aside for further processing\n1.1. In this case, the Receiving Associate can alternatively tags displaying the donation number and donor information.\n1.2. The acquisition is left in the Partially Received state until processing is completed at a later time\n3.9.6. Business Rules:\n1. Donation receipt information:\n1.1. Donation date\n1.2. List of donated items\n1.2.1. Description\n1.2.2. Quantity Received\n1.2.3. Condition\n1.3. Name of Construction Junction representative\n1.4. Signature of Construction Junction representative\n1.5. Construction Junction contact information\n1.6. Tax deduction information text\n2. Buttons and shortcuts should be easy to click on a touch screen workstation. Extra spacing between rows should be added if necessary.\n3. The donation item name initially displayed on each item row is the donation item name in the CRM acquisition record.\n4. The Pickup and Decon crews can change anything on this screen and also in the item detail screen, but can't complete the acquisition or add items to the inventory (buttons are disabled)\n5. The Email Receipt button takes you to the Email Receipt screen\n6. The email receipt screen shows all email addresses associated with the Acquisition in CRM\n6.1. One or more can be selected to receive the email receipt\n6.2. If no emails are available, they need to be added in CRM\n7. The system must record every time a receipt is printed or emailed\n8. Selecting a stock category takes you back to the acquisition screen , not to the items details page\n9. Selecting an under $5 category prompts for a description and also takes you back to the acquisition screen\n10. Condition is optional. If left blank, the donor may write it manually on the receipt\n11. Clicking add item takes you directly to the inventory matrix so that the item category can be selected, then to the item details screen\n12. Adding an item here also adds a record to the Acquisition in CRM (shared entities)\n13. Updating an item here updates the inventory fields on the Acquisition record in CRM (shared entities)\n14. Completing the acquisition freezes the record in both CRM and the Inventory Management System\n15. The system should record the total amount of time taken to process each acquisition\n16. The original CRM acquisition data must be kept, not overridden by the values entered here\n3.9.7. Post-Condition(s):\n1. Donated items are present in the Inventory Management System\n2. Unique and stock items have item tags\n3. Unique items are added to POS\n4. Quantities for stock items are updated in POS\n5. Donor has donation receipt\n6. Donation request in the system has a status of Processed\n3.9.8. Open Issues:\nNone\n3.9.9. Extension Points:\nNone\n3.9.10. Activity Diagram(s):\nNone",
        "output": "@startuml\ntitle Use Case 3.9 – Receive Acquisition\n\nactor \"Donor / Primary Contact\" as Donor\nactor \"Receiving Associate\" as Associate\nparticipant \"Inventory System\" as System\n\n== Locate Donation Request ==\nDonor -> Associate : 1. Arrives at receiving dock with donation number\n\nalt Items require further processing\n    Associate -> System : Tag items with donation number & donor info\n    System -> Associate : Leave acquisition in 'Partially Received' state\nend\n\nAssociate -> System : 2. Locate donation request\nref over Associate, System: see View Acquisitions\nactivate System\nSystem -> Associate : 3. Display donation request information\ndeactivate System\n\n== Enter Donated Items ==\nAssociate -> System : 4. Enter donated item information\nref over Associate, System: see Add Item to Inventory\nactivate System\nalt Add New Item\n    Associate -> System : 4.2 Click 'Add Item' button\nelse Clone Existing Item\n    Associate -> System : 4.1 Clone existing item\nelse Remove Item\n    Associate -> System : 4.3 Set quantity to zero\nend\ndeactivate System\n\n== Print and Issue Receipt ==\nAssociate -> System : 5. Print donation receipt\nactivate System\nopt write condition manually\nAssociate -> Associate : 6. Write condition manually\nend\nAssociate -> Donor : 7. Provide receipt to donor\ndeactivate System\n\n== Print and Attach Item Tags ==\nAssociate -> System : 8. Print item tags for unique & stock items\nref over Associate, System : see Add Item to Inventory\nactivate System\nAssociate -> Associate : 9. Attach printed tags to items\ndeactivate System\n\n== Close Donation Request ==\nAssociate -> System : 10. Close donation request\nactivate System\ndeactivate System\n\n@enduml"
    },
    {
        "file_name": "g04-uc-req_v0_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements: \nName Use Case: UC1: Urban traffic flow congestion analysis\nScope Traffic flow management application\nLevel User goal\nPrimary actor Urban mobility planner\nStakeholders and \nInterests\n- Users (urban mobility planners, media team of the urban mobility\ndepartment): needs real time analysis of urban mobility, to be able to\nfind the best solution to improve traffic flows throughout the city.\n- The Mayor of Wonderland: wants to accepts plans to improve traffic\ncongestions only when all stakeholders and their interests have been\nconsidered (costs, noise, pollution etc.).\n- Emergency services (police, ambulance, firefighters): wants to be able to\nsee where high congestion areas are (circumventing these areas during\npeak hours).\n- Residents: wants less congested traffic, but the solution must be fair\n(noise, pollution).\nPreconditions - The system has retrieved all relevant sensory data and is ready to\nsimulate.\n- The user is authenticated to use the system (logged in).\nPostconditions - Cause and effect of different scenarios regarding urban traffic are shown\nin real-time.\n- A selection of suggested improvements for traffic flow is shown by the\nsystem.\nMain Success \nScenario:\n1. The user authenticates and is logged into the system.\n2. The system shows the traffic flows of the city, based on historic data.\n2.1 Congested traffic flows are shown in red.\n3. The user selects a certain area/roads to be improved.\n4. The system suggests traffic flow improvements.\n5. The user selects the best (w.r.t. noise, pollution, costs, people affected)\ntraffic flow improvement.\n6. The system shows the updated traffic flow.\n7. The user retrieves a report of suggested traffic flow improvement and\nplan of action generated by the system (simulated data).\n8. The report then presented to the respective stakeholder (mayor, for\napproval or emergency services).\nSpecial \nRequirements:\n1. Data must be stored locally (by the municipality, not in the cloud).\n2. Process in real-time; show results directly.\n3. No technical expertise is needed to use the system (user friendly).",
        "output": "@startuml\ntitle UC1: Urban traffic flow congestion analysis\n\nactor \"Urban Mobility Planner\" as Planner\nentity System\ndatabase \"local database\" as LD\nactor \"Mayor of Wonderland\" as Mayor\nactor \"Emergency Services\" as Emergency\nactor Residents\n\nPlanner -> System: Login\nactivate System\nSystem -> Planner: Login successful\ndeactivate System\n\nPlanner -> System: Request traffic flow data based on historic data\nactivate System\nSystem -> LD: Get request\nactivate LD\nLD -> System: Receive historic traffic data\ndeactivate LD\nSystem -> Planner: Display traffic flow\n\ngroup Traffic flows info contains\nSystem -> Planner: Display congested areas in red\nend\ndeactivate System\n\nPlanner -> System: Select area/roads to improve\nactivate System\nSystem -> Planner: Suggest traffic flow improvements\ndeactivate System\n\nPlanner -> System: Select best traffic flow improvement\nactivate System\nSystem -> Planner: Display updated traffic flow\ndeactivate System\n\nPlanner -> System: Retrieve report of suggested improvement and action plan\nactivate System\nSystem -> LD: Get request\nactivate LD\nLD -> System: Receive simulated data\ndeactivate LD\nSystem -> System: Analysis data\nSystem -> Planner: Provide report\ndeactivate System\n\nPlanner -> Mayor: Present report\nPlanner -> Emergency: Present report\nPlanner -> Residents: Present report\n@enduml"
    },
    {
        "file_name": "g04-uc-req_v1_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nName of Use Case: UC3: Urban traffic flow noise and pollution analysis.\nScope Traffic flow management application\nLevel User goal\nPrimary actor Media team\nStakeholders and Interests\n- Users (urban mobility planners, media team of the urban mobility\ndepartment): needs real time analysis of urban mobility, to be able to\nfind the best solution to improve traffic flows/\n- The Mayor of Wonderland: wants to accepts plans to improve traffic\ncongestions only when all stakeholders and their interests have been\nconsidered (costs, noise, pollution etc.).\n- Emergency services (police, ambulance, firefighters): wants to be able to\nsee where high congestion areas are (circumventing these areas during\npeak hours).\n- Residents: wants less congested traffic, but the solution must be fair\n(noise, pollution).\nPreconditions - The system has retrieved all relevant sensory data and is ready to\nsimulate.\n- The user is authenticated to use the system (logged in).\nPostconditions Cause and effect of different scenarios regarding urban traffic are shown in real\u0002time.\nMain Success Scenario:\n1. Multiple residents filed reports on traffic related issues (noise, pollution,\ncongestion)\n2. The user (media team member) authenticates and is logged into the\nsystem.\n3. The system shows the traffic flows of the city, based on historic data.\na. Areas affected by noise and pollution are highlighted\nb. Population density is shown.\n4. The user retrieves an overview of areas that are higher than the allowed\nnoise/pollution levels.\n5. The user retrieves a report of suggested traffic flow measurements and\nplan of action generated by the system (simulated data) in order to lower\nthe noise/pollution levels below certain thresholds\n6. The report is presented to the relevant stakeholders (Mayor, Head of\nUrban Mobility Department, Residents).\nSpecial Requirements:\n1. Data must be stored locally (by the municipality, not in the cloud).\n2. Process in real-time; show results directly.\n3. No technical expertise is needed to use the system (user friendly).",
        "output": "@startuml\ntitle UC3: Urban traffic flow noise and pollution analysis\n\nactor Residents\nactor \"Media Team Member\" as User\nentity System\ndatabase \"local database\" as LD\nactor \"Mayor of Wonderland\" as Mayor\nactor \"Emergency Services\" as Emergency\n\nResidents -> User: Report traffic issues (noise, pollution, congestion)\nUser -> System: Login\nactivate System\nSystem -> User: Login successful\ndeactivate System\n\nUser -> System: Request traffic flow data based on historic data\nactivate System\nSystem -> LD: Get request\nactivate LD\nLD -> System: Receive historic traffic data\ndeactivate LD\nSystem -> User: Display traffic flows\n\ngroup Traffic flows info contains\nSystem -> User: Highlight areas affected by noise and pollution\nSystem -> User: Display population density\nend\ndeactivate System\n\nUser -> System: Retrieve overview of areas exceeding noise/pollution levels\nactivate System\nSystem -> User: Display overview\ndeactivate System\n\nUser -> System: Retrieve report of suggested traffic flow measures and action plan\nactivate System\nSystem -> LD: Get request\nactivate LD\nLD -> System: Receive simulated data\ndeactivate LD\nSystem -> System: Analysis data\nSystem -> User: Provide report\ndeactivate System\n\nUser -> Mayor: Present report\nUser -> Emergency: Present report\nUser -> Residents: Present report\n@enduml"
    },
    {
        "file_name": "g04-uc-req_v3_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nName of Use Case: UC2: Urban traffic flow during big events analysis\nScope Traffic flow management application\nLevel User goal\nPrimary actor Urban mobility planner\nStakeholders and Interests\n- Users (urban mobility planners, media team of the urban mobility\ndepartment): needs real time analysis of urban mobility, to be able to\nfind the best solution to improve traffic flows during big events.\n- Emergency services (police, ambulance, firefighters): wants to be able to\nsee where high risk areas are, what the effect of certain big events are on\ncertain congestion points (and how these can be improved).\n- The Mayor of Wonderland: wants to accepts plans to improve traffic\ncongestions only when all stakeholders and their interests have been\nconsidered (money, noise, pollution etc.).\n- Residents: wants less congested traffic, but the solution must be fair\n(noise, pollution).\nPreconditions - The system has retrieved all relevant sensory data and is ready to\nsimulate.\n- The user is authenticated to use the system (logged in).\nPostconditions Cause and effect of different scenarios regarding urban traffic are shown in real\u0002time.\nMain Success \nScenario:\n1. The user authenticates and is logged into the system.\n2. The system shows the traffic flows of the city, based on historic data.\n2.1 Congested traffic flows are shown in red.\n3. The user specifies a big event at a certain building/area with an expected\nnumber of visitors.\n4. The system shows the traffic flows from before and after the event.\n5. The user selects can tinker around with traffic flow management\nsolutions (blocking certain roads off, redirecting traffic, etc.)\n6. The system shows the updated traffic flow.\n7. The user retrieves a report of suggested traffic flow measurements and\nplan of action generated by the system (simulated data).\nSpecial \nRequirements:\n1. Data must be stored locally (by the municipality, not in the cloud).\n2. Process in real-time; show results directly.\n3. No technical expertise is needed to use the system (user friendly).",
        "output": "@startuml\ntitle UC2: Urban traffic flow during big events analysis\n\nactor \"Urban Mobility Planner\" as UMP\nentity \"Traffic Flow Management System\" as TFMS\ndatabase \"Local Data Storage\" as LDS\n\nactor \"Emergency Services\" as ES\nactor \"Mayor of Wonderland\" as MW\nactor \"Residents\" as R\n\n== User Authentication ==\nUMP -> TFMS: Authenticate()\nactivate TFMS\nTFMS -> LDS: Retrieve user credentials\nactivate LDS\nLDS -> TFMS: Return user credentials\ndeactivate LDS\nTFMS -> UMP: Confirm authentication\ndeactivate TFMS\n\n== Display Traffic Flows ==\nUMP -> TFMS: Request current traffic flow data\nactivate TFMS\nTFMS -> LDS: Fetch historic traffic data\nactivate LDS\nLDS -> TFMS: Return traffic data\ndeactivate LDS\nTFMS -> UMP: Display traffic flows\\n(congested areas in red)\ndeactivate TFMS\n\n== Event Specification ==\nUMP -> TFMS: Specify big event details\\n(location, expected visitors)\nactivate TFMS\n\n== Traffic Flow Simulation ==\nTFMS -> TFMS: Simulate traffic impact\\nbased on event details\nTFMS -> UMP: Display traffic flow before and after event\ndeactivate TFMS\n\n== Traffic Management Solutions ==\nUMP -> TFMS: Input traffic flow management solutions\nactivate TFMS\nTFMS -> TFMS: Update traffic flow simulation\\nwith new parameters\nTFMS -> UMP: Display updated traffic flows\ndeactivate TFMS\n\n== Generate Report ==\nUMP -> TFMS: Request report of suggested traffic flow measurements and plan of action\nactivate TFMS\nTFMS -> TFMS: Generate report\\n(simulated data)\nTFMS -> LDS: Store report data locally\nactivate LDS\nLDS -> TFMS: Report data stored\ndeactivate LDS\nTFMS -> UMP: Provide traffic flow report and\\nplan of action\ndeactivate TFMS\n\n@enduml"
    },
    {
        "file_name": "g05-uc-req_v0_use case1_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nUse Case 1\nScope: IFA Digital System\nLevel: Budget and Reporting\nPrimary Actor: Team Manager, IFA Budget Manager, IFA Auditor\nStakeholders: IFA, Team Managers\nMain Success Scenario:\n1. IFA Budget manager receives an alert.\n2. IFA Budget manager assigns a budget to the teams using the system.\n3. IFA Budget Manager will assign budgets to the teams using the “Budget” section in the\nsystem.\nStep 1 will keep repeating until the budget is uploaded into the system.\n4. Team manager receives an alert\n5. Team manager can see the assigned budget.\n6. Team manager assigns the budget to various team activities.\n7. Team manager prepares a report of all the spendings.\n8. Team manager uploads a report into the system.\nStep 4 will keep repeating until the report is uploaded into the system.\n9. IFA Auditor receives an alert.\n10. IFA auditor can see the report submitted by the team manager.\n11. IFA Auditor sends a communication to the team manager if any discrepancies in the report\nare found.\n12. Team manager receives an alert.\n13. Team manager edits the report and uploads it back to the system.\n14. IFA Auditor receives an alert.\n15. IFA Auditor approves the report.\nSteps 11-14 will keep repeating until the IFA Auditor is satisfied with the report.\nSpecial Requirements:\n• All the stakeholders should have a user profile in the system.\n• The “Budget” interface of the system is only visible to the primary actors.\n• The interface should be available in multiple languages and currencies.\n• The interface should have an encryption layers to protect the confidential budget data.\n• IFA Budget manager can monitor the budgets in real-time.\n• IFA Budget Manager cannot edit the report submitted by the team manager.\n• IFA Auditor cannot edit the report submitted by the team manager.\n• IFA Auditor cannot change the budget numbers.\n• Team manager cannot change the budget numbers.\n• Team manager can only see his/her budget.\n• IFA Budget manager and IFA auditor can see all the assigned budgets.\n• This complete activity is to be repeated yearly.\n• The budget details should be archived for future reference.",
        "output": "@startuml\ntitle Use Case 1: Budget and Reporting\n\nactor \"Team Manager\" as TM\nactor \"IFA Budget Manager\" as IBM\nentity System\nactor \"IFA Auditor\" as IA\n\nloop every year\nloop Budget is not uploaded\nSystem -> IBM: Receive alert\nactivate System\nbreak Budget is uploaded\nIBM -> System: Assign budget to teams using the “Budget” section\ndeactivate System\nend\nend\n\nloop Report is not uploaded\nSystem -> TM: Alert for assigned budget\nactivate System\nSystem -> TM: Display assigned budget\ndeactivate System\nTM -> TM: Assign budget to activities\nTM -> TM: Prepare spending report\nbreak Report is uploaded\nTM -> System: Upload report spending report\nactivate System\nend   \nend\n\nSystem -> IA: Alert for submitted report\nSystem -> IA: Display submitted report\ndeactivate System\nloop Report is not approved\n    IA -> TM: Alert for discrepancies\n    TM -> TM: Edit report\n    TM -> System: Upload report\n    activate System\n    System -> IA: Alert for edited report\n    deactivate System\nbreak Report is approved\n    IA -> System: Approve report\nend\nend\nend\n@enduml"
    },
    {
        "file_name": "g05-uc-req_v0_use case2_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nUse Case 2\nScope: IFA Digital System\nLevel: Live Game Updates\nPrimary Actor: Referee, Sub-Referee\nStakeholders: IFA, Fans, Referee, Sub-Referee, Teams\nMain Success Scenario:\n1. Stakeholders receive an alert that a game has started.\n2. The referee is on the playing field and can access the system using a mobile phone.\n3. Sub-referee can access the system using a mobile phone.\n4. Either of the primary actors records the live scores of the game.\nStep 4 is repeated until the game ends.\n5. Either of the primary actors can post in the system about the penalties issued in the game.\n6. Sub-referee can record snippets of the live game and upload it into the system.\n7. All the updates posted by the primary actors are visible to the stakeholders.\nSpecial Requirements:\n• All the stakeholders should have individual user profile in the system.\n• All the stakeholders can comment on the posts uploaded by referees.\n• Posts made by referees should be available in real-time.",
        "output": "@startuml\ntitle Use Case 2: Live Game Updates\n\nactor Referee\nactor \"Sub Referee\" as SubReferee\nentity System\nparticipant IFA\nparticipant Fans\nparticipant Teams\n\npar\nSystem -> Referee: Receive alert for game start\nactivate System\nelse\nSystem -> SubReferee: Receive alert for game start\nelse\nSystem -> IFA: Receive alert for game start\nelse\nSystem -> Fans: Receive alert for game start\nelse\nSystem -> Teams: Receive alert for game start\nend\n\npar\nReferee -> System: Access system via mobile\nelse\nSubReferee -> System: Access system via mobile\nend\n\nloop Until game ends\n    alt\n    Referee -> System: Record live scores\n    else\n    SubReferee -> System: Record live scores\n    end\nend\n\nalt\nReferee -> System: Post penalties\nelse\nSubReferee -> System: Post penalties\nend\n\nSubReferee -> System: Record and upload snippets\n\npar\nSystem -> Referee: Updates visible in real-time\nelse\nSystem -> SubReferee: Updates visible in real-time\nelse\nSystem -> IFA: Updates visible in real-time\nelse\nSystem -> Fans: Updates visible in real-time\nelse\nSystem -> Teams: Updates visible in real-time\nend\n\nopt\npar\nReferee --> System: Comment on the posts\nelse\nSubReferee --> System: Comment on the posts\nelse\nIFA --> System: Comment on the posts\nelse\nFans --> System: Comment on the posts\nelse\nTeams --> System: Comment on the posts\ndeactivate System\nend\nend\n@enduml"
    },
    {
        "file_name": "g05-uc-req_v0_use case3_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nUse Case 3\nScope: IFA Digital System\nLevel: Scheduling\nPrimary Actor: Referee, IFA Scheduling Committee member\nStakeholders: Referee, IFA, Teams\nMain Success Scenario:\n1. The IFA Scheduling committee plans to schedules the games.\n2. Referees receive an alert.\n3. Referees put in the system the dates they are available on.\n4. The IFA Scheduling committee member enters the parameters in the system required to\nmake a schedule.\n5. The IFA Scheduling committee member enters the dates referees are available on.\n6. The system generates an automatic schedule.\n7. Teams receive an alert.\n8. Referees receive an alert.\nSpecial Requirements:\n• All the stakeholders should have individual user profile in the system.\n• The games are scheduled once a year.\n• The interface should have the capability to accommodate multiple time zones.\n• There should be a provision in the system which allows the scheduling committee to give a\nteam a rest period of “n” days between two consecutive matches.\n• Once a schedule is made, it cannot be changed by anyone except a senior member of the\nscheduling committee.\n• Change is schedule has to be approved and the reason for rescheduling has to be stated.\n• The schedule can be exported into a “.pdf” format.\n• The teams and referees cannot edit the schedule.\n• All the scheduled should be archived for future reference.",
        "output": "@startuml\ntitle Use Case 3: Scheduling\n\nactor Referees\nactor \"IFA Scheduling Committee Member\" as IFASchedulingCommitteeMember\nactor Teams\nentity System\n\nloop every year\n    IFASchedulingCommitteeMember -> System: Plan and schedule games\n    activate System\n    System -> Referees: Alert for scheduling\n    Referees -> System: Enter available dates\n    System -> IFASchedulingCommitteeMember: Display referees' available dates\n    deactivate System\n\n    IFASchedulingCommitteeMember -> System: Enter parameters for schedule\n    activate System\n    IFASchedulingCommitteeMember -> System: Enter referees' available dates\n    opt Give team a rest period of “n” days between two consecutive matches\n        IFASchedulingCommitteeMember -> System: Enter “n” days between two consecutive matches\n    end\n\n    System -> System: Generate automatic schedule\n    System -> System: All schedules are archived for future reference\n    System -> Teams: Alert for schedule\n    System -> Referees: Alert for schedule\n    deactivate System\n\n    opt If a senior member of scheduling committee would like to change the schedule\n        IFASchedulingCommitteeMember -> System: Reschedule the matches and explain the reason\n        activate System\n        alt Reschedule approved\n            System -> IFASchedulingCommitteeMember: Reschedule is approved\n            System -> System: All schedules are archived for future reference\n            System -> Teams: Alert for reschedule\n            System -> Referees: Alert for reschedule\n        else Reschedule is not approved\n            System -> IFASchedulingCommitteeMember: Reschedule is not approved\n        end\n        deactivate System\n    end\nend\n@enduml"
    },
    {
        "file_name": "g05-uc-req_v0_use case4 _Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:\nUse Case 4\nScope: IFA Digital System\nLevel: Fan Portal\nPrimary Actor: Fans\nStakeholders: Fans, IFA, Teams\nMain Success Scenario:\n1. Fan registers in the system and creates a user profile.\n2. Fan “follows” the profiles of favourite teams and players.\n3. Fan gets an alert whenever there is an activity by the followed team(s) and/or player(s).\n4. A fan can see the activity and comment on the posts made by the followed team(s) and/or\nplayer(s).\nAlternate Flows:\n1. A fan does not have a user profile. He/she is considered as a guest user.\n2. Guest User can check the live scores and live updates.\n3. Guest User can check the page that displays the score of all the matches in the tournament.\nSpecial Requirements:\n• All the stakeholders should have user profile to use the “follow” feature of the system.\n• All the stakeholders should have user profile to use the “alert” feature of the system.\n• The system should be able to accommodate at least 50,000 users at once.\n• The updates made by the users should be visible in real time.",
        "output": "@startuml\ntitle Use Case 4: Fan Portal\n\nactor Fan\nentity System\n\nalt If a fan is a new user in the system\n    Fan -> System: Request to Register\n    activate System\n    System -> Fan: Register successful\n    Fan -> System: Create a user profile\n    System -> Fan: User profile is created\n    deactivate System\n    Fan -> System: Follow the profiles of favourite teams and players\n    activate System\n    opt If there is an activity by the followed team(s) and/or player(s)\n        System -> Fan: Alert for activity by followed teams/players\n        Fan -> System: View activity and comment\n    end\n    deactivate System\n\nelse If a fan is a guest user\n    Fan -> System: Check live scores and updates\n    activate System\n    Fan -> System: View the score of all the matches in the tournament\n    deactivate System\nend\n\nnote right of System\nThe system should be \nable to accommodate at \nleast 50,000 users at once.\nend note\n@enduml"
    },
    {
        "file_name": "g05-uc-req_v0_use case5_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it. \nRequirements: Use Case 5\nScope: IFA Digital System\nLevel: User Management\nPrimary Actor: IFA Admin, Team Managers\nStakeholders: IFA, Teams, Referees\nMain Success Scenario:\n1. IFA wants to on-board a new team.\n2. IFA Admin add the team manager into the system.\n3. Team manager adds players of the team into the system.\nAlternate Success Scenario:\n1. IFA wants to on-board a new referee.\n2. IFA Admin adds the referee into the system.\nSpecial Requirements:\n• Only IFA Admin can add the team managers and referees.\n• Only team manager can add the team players.\n• Only team manager can remove a team player.\n• Each user profile is private and password protected.",
        "output": "@startuml\ntitle Use Case 5: User Management\n\nactor \"IFA Admin\" as IFAAdmin\nactor \"Team Manager\" as TeamManager\nparticipant System\n\ngroup On-board new team\n    IFAAdmin -> System: Add team manager\n    activate System\n    TeamManager -> System: Add players\n    deactivate System\nend\n\nalt On-board new referee\n    IFAAdmin -> System: Add referee\n    activate System\n    deactivate System\nend\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case1_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:  \nUse Case 1\nSummary: A doctor has an appointment, and will make a change to the global database.\nActors: Doctor, patient\nPrecondition: Patient has scheduled an appointment with the doctor\nDescription:\n1.\tDoctor opens the patient’s EMR and views his medical history.\n2.\tPatient comes into the doctor’s office at the appointed time.\n3.\tPatient explains his problem to the doctor.\n4.\tDoctor writes a summary and diagnosis on his tablet.\n5.\tAfter the patient leaves, the doctor uploads this text to the EMR of the patient, so the global database is updated.\nPostcondition: The database is updated with new information about the patient.\n\nAlternate flow:\n5a. The doctor edits an existing entry in the patient’s EMR.",
        "output": "@startuml\ntitle Use Case 1\n\nactor Doctor\nactor Patient\ndatabase \"Global Database\" as GD\n\nactivate Doctor\nDoctor -> GD: Open patient's EMR\nactivate GD\nGD -> Doctor: Display medical history\ndeactivate GD\n\nPatient -> Doctor: Arrive at appointment time\nPatient -> Doctor: Explain problem\n\nDoctor -> Doctor: Write summary and diagnosis\n\nalt Upload summary and diagnosis\n    Doctor -> GD: Upload new text\n    activate GD\nelse Edit existing entry\n    Doctor -> GD: Edit existing entry\nend\n\nGD -> GD: Update patient information\ndeactivate GD\ndeactivate Doctor\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case2_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements: \nUse Case 2\nSummary: A patient schedules an appointment \nActors: Patient, appointment scheduling system, receptionist\nPrecondition: Patient is a user in the hospital system\nDescription: \n1.\tPatient opens the hospital app on his phone.\n2.\tPatient logs in on the app with his personal account.\n3.\tPatient navigates to the part of the app for scheduling appointments.\n4.\tPatient selects a time slot to schedule his appointment. (Exception: this time slot is already reserved)\n5.\tThe appointment scheduling system sends the request to a receptionist.\n6.\tA receptionist approves the request.\n7.\tThe appointment scheduling system sends the appointment to the doctor.\n8.\tThe appointment is created in the global database.\nExceptions:\nTime slot is already reserved. Raised when another patient reserves a time slot while this patient is in the process. Can be prevented by not allowing two patients to select the same time slot.\nPostcondition: There is an appointment scheduled",
        "output": "@startuml\ntitle Use Case 2\n\nactor Patient\nactor Receptionist\nactor Doctor\nboundary \"Hospital App Interface\" as App\ncontrol \"Appointment Scheduling System\" as ASS\ndatabase \"Global Database\" as DB\n\nPatient -> App: Open app\nactivate App\nPatient -> App: Log in\nApp -> Patient: Display user interface\ndeactivate App\n\nPatient -> App: Navigate to scheduling section\nactivate App\nPatient -> App: Select time slot\nApp -> ASS: Send request\ndeactivate App\n\nactivate ASS\nalt Time slot reserved\n    ASS -> Patient: Notify time slot is reserved\nelse Time slot available\n    ASS -> Receptionist: Send request for approval\n    Receptionist -> ASS: Approve request\n\n    ASS -> Doctor: Notify doctor of appointment\n    ASS -> DB: Create appointment in database\n    activate DB\nend\ndeactivate ASS\nDB -> Patient: Confirm appointment\ndeactivate DB\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case3_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:  \nUse Case 3\nSummary: A nurse uses a mobile device, the recorded data is uploaded to the database.\nActors: Nurse, mobile device\nPrecondition: Patient is checked in to the hospital and has to have his blood pressure measured.\nDescription: \n1.\tThe nurse brings the mobile device to the patient\n2.\tThe nurse indicates on the mobile device which patient will be measured.\n3.\tThe nurse measures the blood pressure of the patient with the mobile device.\n4.\tThe mobile device automatically uploads this information to the global database, where it is included in the correct patient’s EMR.\nPostcondition: The patient’s blood pressure is measured and the values are added to his EMR.",
        "output": "@startuml\ntitle Use Case 3\n\nactor Nurse\nactor Patient\ncontrol \"Mobile Device\" as Device\ndatabase \"Global Database\" as DB\n\nNurse -> Patient: Bring mobile device\nNurse -> Device: Indicate patient for measurement\nactivate Device\n\nNurse -> Device: Start blood pressure measurement in the mobile device\nDevice -> Patient: Measure blood pressure\nactivate Patient\nPatient -> Device: Obtain blood pressure\ndeactivate Patient\n\nDevice -> DB: Upload measurement in the correct patient’s EMR\nactivate DB\ndeactivate DB\n\ndeactivate Device\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case4_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:  \nUse Case 4\nSummary: An analyst reviews the data collected by the system\nActors: Analyst, central database\nPreconditions: Analyst has access to the system, there has been data collected\nDescription: \n1.\tAnalyst logs in to the system with his personal account.\n2.\tAnalyst requests data from the central database. \n3.\tCentral database sends data to analyst.\n4.\tAnalyst performs his analysis on this data.\nPostcondition: Data has been collected and analyzed.",
        "output": "@startuml\ntitle Use Case 4\n\nactor Analyst\ncontrol System\ndatabase \"Central Database\" as DB\n\nactivate Analyst\nAnalyst -> System: Login\nactivate System\nSystem -> Analyst: Login successful\ndeactivate System\n\nAnalyst -> DB: Request data\nactivate DB\nDB -> Analyst: Send data\ndeactivate DB\n\nAnalyst -> Analyst: Perform analysis\ndeactivate Analyst\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case5_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:  \nUse Case 5\nSummary: A patient orders medicine at his pharmacy through the website.\nActors: Patient, pharmacist, prescription management system, doctor\nPrecondition: Patient is registered in the system\nDescription: \n1.\tPatient navigates to the website on his computer.\n2.\tPatient logs in using his personal account.\n3.\tPatient goes to the pharmacy’s part of the website. \n4.\tPatient finds the medicine he wants to order.\n5.\tPatient orders the medicine at the pharmacy.\n6.\tThe order is uploaded to the prescription management system\n7.\tThe prescription management system notifies the pharmacist.\n8.\tPharmacist reviews the order.\n9.\tPharmacist readies the medicine for the patient and updates the status in the prescription management system.\n10.\tPatient receives a notification that his order is ready.\n11.\tPatient picks up his order at the pharmacy.\nPostcondition: Patient has his medicine.\nAlternate flow:\n1a-5a. A doctor places an order for medicine for his/her patient.",
        "output": "@startuml\ntitle Use Case 5\n\nactor Patient\nactor Doctor\nactor Pharmacist\nboundary Website\ncontrol Pharmacy\nentity \"Prescription Management System\" as PMS\n\nalt Patient places order\n    Patient -> Website: Navigate to website\n    activate Website\n    Patient -> Website: Login\n    Website -> Patient: Login successful\n    deactivate Website\n    Patient -> Pharmacy: Go to pharmacy section\n    activate Pharmacy\n    Patient -> Pharmacy: Find and select medicine\n    Patient -> Pharmacy: Order medicine\nelse Doctor places order\n    Doctor -> Pharmacy: Place order for patient\nend\n\n\nactivate Pharmacy\nPharmacy -> PMS: Upload order\ndeactivate Pharmacy\nactivate PMS\nPMS -> Pharmacist: Notify of new order\ndeactivate PMS\n\nactivate Pharmacist\nPharmacist -> PMS: Review order\nPharmacist -> Pharmacy: Ready the medicine for the patient\nactivate Pharmacy\nPharmacist -> PMS: Update order status\ndeactivate Pharmacist\n\nactivate PMS\nPMS -> Patient: Notify order ready\ndeactivate PMS\n\nPatient -> Pharmacy: Pick up order\ndeactivate Pharmacy\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case6_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:  \nUse Case 6\nSummary: Admin adds a new doctor to the system.\nActors: Admin, doctor\nPrecondition: The hospital has employed a new doctor.\nDescription: \n1.\tThe hospital sends the information of the new doctor to the admin.\n2.\tThe admin creates a new account for this doctor.\n3.\tThe admin sets the privileges of the newly created account.\n4.\tThe account credentials are sent to the new doctor.\n5.\tThe doctor uses the received credentials to log in to the system.\nPostcondition: The doctor can log in the system, and only access the information that is relevant to him.",
        "output": "@startuml\ntitle Use Case 6\n\nactor Admin\nactor Doctor\nparticipant \"Hospital\" as Hospital\ncontrol \"System\" as Sys\n\nactivate Hospital\nHospital -> Admin: Send the new doctor information\ndeactivate Hospital\n\nactivate Admin\nAdmin -> Sys: Create a new doctor account\nactivate Sys\nSys -> Admin: Confirm account creation\ndeactivate Sys\n\nAdmin -> Sys: Set account privileges\ndeactivate Admin\nactivate Sys\nSys -> Doctor: Send account credentials\ndeactivate Sys\n\nactivate Doctor\nDoctor -> Sys: Login\nactivate Sys\nSys -> Doctor: Login successful\ndeactivate Sys\ndeactivate Doctor\n@enduml"
    },
    {
        "file_name": "gc02-uc-cm-req_v1_use case7_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it.                                                                                                            \nRequirements:  \nUse Case 7\nSummary: Patient changes his personal information in the central database.\nActor: Patient\nPrecondition: Patient is registered in the system.\nDescription:\n1.\tPatient navigates to the website on his computer.\n2.\tPatient logs in using his personal account.\n3.\tPatient navigates to the personal information section.\n4.\tPatient clicks the button to change his information.\n5.\tPatient supplies new information and clicks save.\n6.\tThe new information is added to the central database by the system.\n7.\tThe central database applies the change to all relevant systems.\nPostcondition: The patient’s personal information has been changed.",
        "output": "@startuml\ntitle Use Case 7\n\nactor Patient\nboundary Website\ncontrol \"Personal Information Section\" as PIS\ndatabase \"Central Database\" as DB\ncontrol \"All Relevant Systems\" as RS\n\nPatient -> Website: Navigate to website\nactivate Website\nPatient -> Website: Login\nWebsite -> Patient: Login successful\ndeactivate Website\n\nPatient -> PIS: Navigate to personal info\nactivate PIS\nPatient -> PIS: Request to change the information\nPIS -> Patient: Request response\nPatient -> PIS: Supply new information\nPIS -> PIS: Save the information\nPIS -> DB: Add the information\ndeactivate PIS\nactivate DB\nDB -> RS: Apply change\nactivate RS\ndeactivate RS\ndeactivate DB\n@enduml"
    },
    {
        "file_name": "keepass_v04_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it. \nRequirements:\n3.1 New Database \nThis feature provides the ability to create a new database\n3.1.1 Description \nIt is the first thing a user must do to begin using KeePass. Its main function is the \ndetermination of the master password that will unlock the database from now on \n3.1.2 Stimulus/Response Sequences \nData Flow\n3.1.2.1 Basic Data Flow\n \n 1. User opens KeePass and select New->Database \n 2. User writes his private Master Password and/or selects Key File \n 3. User selects OK \n 4. Master Password confirmation: the user retypes Master Password \n 5. The main database window opens \n3.1.2.2 Alternative Data Flows\n3.1.2.2.1 Alternative Data Flow 1 \n 3. User selects Help \n 4. The help file opens \n3.1.2.2.2 Alternative Data Flow 2 \n 3. User selects Cancel \n 4. Exit from KeePass \n3.1.2.2.3 Alternative Data Flow 3 \n 2a. The user does not determines a Master Password \n 2b. A message is appeared which prompts him to enter a password or key file \n3.1.3 Functional Requirements \nREQ-1: KeePass must be downloaded and installed \nREQ-2: Master Password has no limits in length. A whole sentence can be used with more \nthan 100 characters.",
        "output": "@startuml\ntitle 3.1 New Database\n\nactor User\nparticipant KeePass\n\nUser -> KeePass: Open KeePass\nactivate KeePass\nUser -> KeePass: Select New->Database\n\nalt Do not determine a Master Password\n    User -> User: Do not enter Master Password\n    KeePass -> User: Prompt to enter a Master Password or Key File\nend\n\nUser -> KeePass: Enter Master Password and/or select Key File\n\nalt Select OK\n    User -> KeePass: Select OK\n    User -> KeePass: Retype Master Password for confirmation\n    KeePass -> User: Main database window opens\nelse Select Help\n    User -> KeePass: Select Help\n    KeePass -> User: Help file opens\nelse Select Cancel\n    User -> KeePass: Select Cancel\n    KeePass -> User: Exit KeePass\nend\n\ndeactivate KeePass\n@enduml"
    },
    {
        "file_name": "keepass_v05_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it. \nRequirements:\n3.6 Add Group/Subgroup \nThis feature is used to keep data organized in categories for easier access. \n3.6.1 Description\nThere is the ability to organize data into groups and subgroups. The user can create a new \ngroup or subgroups into an existing group. When creating a group/subgroup the user must \nselect a name and then he can add entries into it. \n 3.6.2. Stimulus/Response Sequences \nData Flow\n 3.6.2.1 Basic Data Flow\n \n 1. User opens KeePass and selects to add new group/subgroup \n 2. User types a name and has the option to select an image \n 3. User selects OK \n 4. The group/subgroup is created \n 5. The access returns to the database main window\n \n3.6.2.2 Alternative Data Flows\n3.6.2.2.1 Alternative Data Flow 1 \n 2. User leaves the group/subgroup name field empty \n 3. A message is appeared “Add a name for the group/subgroup” \n \n3.6.2.2.2 Alternative Data Flow 2 \n 3. User selects Cancel \n 4. The access returns to main window \n3.6.3 Functional Requirements \nREQ-7: A name is required in order for the new group/subgroup to be created \nREQ-8: A subgroup cannot be created when no group is selected",
        "output": "@startuml\ntitle 3.6 Add Group/Subgroup\n\nactor User\nparticipant KeePass\n\nUser -> KeePass: Open KeePass\nactivate KeePass\n\nalt Add new group\n    User -> KeePass: Select to add new group\nelse Add new subgroup\n    User -> KeePass: Select an existing group\n    User -> KeePass: Select to add new subgroup\nend\n\nalt Name is provided\n    User -> KeePass: Enter name\n    opt\n        User -> KeePass: Select an image\n    end\n    KeePass -> User: Display entered info\n    alt\n        User -> KeePass: Select OK\n        KeePass -> KeePass: Create group/subgroup\n    else User selects Cancel\n        User -> KeePass: Select Cancel\n    end\n    KeePass -> User: Return to database main window\nelse Name is not provided\n    KeePass -> User: Display message \"Add a name for the group/subgroup\"\nend\n\ndeactivate KeePass\n@enduml"
    },
    {
        "file_name": "keepass_v06_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it. \nRequirements:\n3.14 Change Language \nThis feature allows user to choose one of the language translations that are available in KeePass \n3.14.1 Description \nThe user can select between a number of translations that are available at KeePass website. \nThere are available translations in Arabic, Brazilian, Bulgarian, Catalan, Chinese \n(Simplified and Traditional), Czech, Danish, Dutch, English, Estonian, Finnish, French, \nGalician, German, Greek, Hebrew, Hungarian, Italian, Japanese, Korean, Lithuanian, \nMacedonian, Malay, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, \nSpanish, Swedish, Turkish and Ukrainian. All the user has to do is to select change \nlanguage from the view menu and then the language he wants. If he already has download \nlanguages packets he can choose one of them. If he wants another language pack he can \nselect get more language. Doing this he will be transferred at KeePass website and choose \nthe language he wants for downloading. \n 3.14.2. Stimulus/Response Sequences \nData Flow\n 3.14.2.1 Basic Data Flow\n \n 1. User opens KeePass and selects to change language from the view menu \n 2. The user selects a language to load from the list that appears \n 3. A message appears that informs user that the installation has been done and in \n order for the changes to take place KeePass must be restarted \nSoftware Requirements Specification for KeePass Password Safe Page 21 \n 4. User selects yes (restart now) \n 5. KeePass asks to save any changes that may have been made in the database and \n restarts \n 6. User unlocks the database using the Master Password \n 7. The database appears translated in the new language \n3.14.2.2 Alternative Data Flows\n3.14.2.2.1 Alternative Data Flow 1 \n 2. User selects get more languages \n 3. The browser opens in KeePass website were translations are located \n 4. User selects a language he wants \n 5. The language file downloads and can be found at the list with available \n languages in the language menu \n3.14.2.2.2 Alternative Data Flow 2 \n 4. User selects no (restart later) \n 5. No changes are appeared in the database until the next time KeePass restarts \n3.14.2.2.3 Alternative Data Flow 3 \n 2. User selects close \n 3. No changes are made in the database \n3.14.3 Functional Requirements \nREQ-18: An internet connection and a browser are required in order to download new \n language translations",
        "output": "@startuml\ntitle 3.14 Change Language\n\nactor User\nparticipant KeePass\nparticipant Browser\n\nUser -> KeePass: Open KeePass\nactivate KeePass\nUser -> KeePass: Select \"Change Language\" from the view menu\nKeePass -> User: Display list of available languages\n\nalt Select one language\n    User -> KeePass: Select a language to load\n    KeePass -> User: Inform installation done, restart required\n\n    alt Select \"Yes\"\n        User -> KeePass: Select \"Yes\" (restart now)\n        KeePass -> KeePass: Prompt to save any changes\n        User -> KeePass: Save changes\n        KeePass -> KeePass: Restart KeePass\n        User -> KeePass: Unlock the database using the Master Password\n        KeePass -> User: Display database in the new language\n    else Select \"No\"\n        User -> KeePass: Select \"No\" (restart later)\n    end\nelse Select get more languages\n    User -> KeePass: Select \"Get more languages\"\n    KeePass -> Browser: Open KeePass website for translations\n    activate Browser\n    User -> Browser: Select a language to download\n    Browser -> KeePass: Download language file\n    deactivate Browser\n    KeePass -> User: Display downloaded language in the list\n    KeePass -> User: Inform installation done, restart required\n\n    alt Select \"Yes\"\n        User -> KeePass: Select \"Yes\" (restart now)\n        KeePass -> KeePass: Prompt to save any changes\n        User -> KeePass: Save changes\n        KeePass -> KeePass: Restart KeePass\n        User -> KeePass: Unlock the database using the Master Password\n        KeePass -> User: Display database in the new language\n    else Select \"No\"\n        User -> KeePass: Select \"No\" (restart later)\n    end\nelse Select close\n    User -> KeePass: Select close\nend\n\ndeactivate KeePass\n@enduml"
    },
    {
        "file_name": "pnnl_v06_Reference_activation_box activation box.txt",
        "input": "Generate a sequence diagram using PlantUML from these requirements so that I can provide it to Planttext to visualize it. \nRequirements:\n3.1.1 Start and Stop Diagnostics Use Case\n3.1.1.1 Brief Description\nThis use case provides the actor the means to start and stop diagnostic processing. The actor in this case is the administrator user (see 2.5.1).\n3.1.1.2 Flow of Events\nThe use case begins just prior to when the user launches the application.\n3.1.1.2.1 Basic Flow – Start Diagnostics\n1. The user launches the tool by double-clicking the icon associated with the tool or typing the application’s name.\n2. The tool momentarily displays a splash screen identifying the tool, identifying developing and sponsoring organizations as appropriate, and listing copyright information.\n3. The tool displays the main window of the tool.\n4. The user starts the diagnostic processing by selecting a menu item named “Start Diagnostics” from a drop down menu named “Status”.\n5. Include (Authenticate User). If the user has the appropriate privilege (i.e., the user is the administrator user) the tool requests a confirmatory response from the user to start the diagnostic processing.\n6. If the user confirms the desire to start diagnostic processing, the tool starts the processing and displays an animated indication that diagnostic processing is active. \n7. If the user responds negatively to the confirmation, the tool does not start the diagnostic processing but the user remains authenticated.\n8. If the user does not have the appropriate privilege, the tool does not start the diagnostic processing.\n9. The user secures the tool by selecting a menu item named “Logout” from the drop down menu named “File”.\n10. The tool returns the current user’s privileges to those of the general user.\n11. If a period of 15 minutes elapses whereby the user does not secure the tool, the users privileges will automatically revert to those of a general user. \n3.1.1.2.2 Alternative Flow\n3.1.1.2.2.1 Stopping Diagnostic Processing\n1. The user can stop diagnostic processing at any time after the diagnostic processing has started by selecting the “Stop Diagnostics” menu item from the main menu entitled “Status”.\n2. If the user is not authenticated as the administrator user, include (Authenticate User) to validate privileges for stopping diagnostic processing.\n3. If the user has the appropriate privilege, the tool requests confirmation to stop diagnostic processing. \n4. If the user responds positively to the confirmation, the tool stops diagnostic processing and indicates the stopped condition. Otherwise the software performs no function but the user remains authenticated.\n5. If the user selects the “Exit” menu item from the main menu entitled “File” and the diagnostic processing is not active, the tool exits.\n6. If the user selects “Exit” and the diagnostic processing is active, include (Authenticate User), if the user is not already validated, to verify the user’s privilege to stop diagnostic processing.\n7. If the user is permitted to stop diagnostic processing, the tool stops the processing and exits. Otherwise, the software performs no function. \n3.1.1.3 Special Requirements\nThere are no special requirements for this use case.\n3.1.1.4 Preconditions\nThere are no preconditions for this use case.",
        "output": "@startuml\ntitle 3.1.1 Start and Stop Diagnostics Use Case\n\nactor \"Administrator User\" as Administrator\nparticipant Tool\n\nalt Double-clicking the icon\n    Administrator -> Tool: Double-clicking the icon\n    activate Tool\nelse Typing the application’s name\n    Administrator -> Tool: Typing the application’s name\nend\n\nTool -> Administrator: Display Splash Screen\nTool -> Administrator: Display Main Window\n\nAdministrator -> Tool: Select \"Start Diagnostics\" from \"Status\" Menu\n\nTool -> Administrator: Request Confirmation to Start Diagnostics\n\nalt If the user has the appropriate privilege\n    alt If the user responds positively\n        Administrator -> Tool: Confirm Start Diagnostics\n        Tool -> Tool: Start Diagnostics\n        Tool -> Administrator: Display Active Diagnostic Indication\n    else If the user responds negatively\n        Tool -> Tool: Do not start diagnostics (User remains authenticated)\n    end\nelse If the user does not have the appropriate privilege\n    Tool -> Tool: Do not start diagnostics\nend\n\nalt Stopping Diagnostic Processing\n    Administrator -> Tool: Select \"Stop Diagnostics\" from \"Status\" Menu\n    alt If user is not authenticated as the administrator user but has the appropriate privilege\n        Tool -> Administrator: Request Confirmation to Stop Diagnostics\n        alt If the user responds positively\n            Administrator -> Tool: Confirm Stop Diagnostics\n            Tool -> Tool: Stop Diagnostics\n            Tool -> Administrator: Display Stopped Diagnostic Indication\n        else If the user responds negatively\n            Tool -> Tool: Do not stop diagnostics (User remains authenticated)\n        end\n    else User does not confirm\n        Tool -> Tool: Do not stop diagnostics (User remains authenticated)\n    end\nend\n\nopt Select \"Exit\" from \"File\" Menu\n    Administrator -> Tool: Select \"Exit\" from \"File\" Menu\n    alt Diagnostics processing is not active\n        Tool -> Tool: Exit Tool\n    else Diagnostics processing is active\n        alt User is not validated\n            Tool -> Administrator: Request Confirmation to verify user’s privilege\n            alt User is permitted to stop diagnostics\n                Administrator -> Tool: Confirm user’s privilege\n                Tool -> Tool: Stop Diagnostics\n                Tool -> Tool: Exit Tool\n            else User is not permitted\n                Administrator -> Tool: Insufficient user’s privilege\n                Tool -> Tool: No action\n            end\n        end\n    end\nend\n\nalt Secure the tool\n    Administrator -> Tool: Select \"Logout\" from \"File\" Menu\nelse Do not secure the tool\n    Tool -> Tool: Wait for 15 minutes\nend\n\nTool -> Tool: Revert User Privileges to General User\ndeactivate Tool\n@enduml"
    }
]