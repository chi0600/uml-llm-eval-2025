**Title:** Use Case 02 – Check Tachograph Card Status

**Raw:**

Requirements:  
Use Case 02 – Check tachograph card status  
Description: This use case consists of checking the status of a tachograph card based on its card number. This use case is very useful for CIAs in order to check the validity of a card prior to performing some administrative tasks (e.g. to avoid declaring a lost/stolen card for a wrongly keyed-in card number). It is also useful for enforcement authorities during road-checks where workshop cards could also be checked. The checked card is identified by its card number and its issuing Member State code. As an issued card must be unique, it should only exist in a single CIA data store (the CIA having issued the card).

Basic flow:  
1. TACHOnet deciphers the received request and logs it as-is in its tracking database.  
2. TACHOnet validates its syntax and assigns a TCNRefId.  
3. TACHOnet builds new requests per issuing Member State code in the original request (one per state).  
4. For each identified Member State: build, log, encrypt, send to that Member State CIA, and wait for its response.  
5. For each received response: decipher, log as-is, validate syntax, and store response data linked to TCNRefId.  
6. When all responses arrive or timeout occurs: build, log, encrypt, and send the single consolidated response back to the original caller.

---

**Clean:**  
**Actors:** Card Issuing Authority (CIA), TACHOnet, Member State CIA, TACHOnet Tracking Database (DB)  
**Preconditions:** CIA request received containing card number(s) + issuing Member State code(s); TACHOnet reachable via secure channel.  
**Trigger:** CIA sends “check tachograph card status” request.

**Flow:**  
1. TACHOnet → TACHOnet: Decipher request  
2. TACHOnet → DB: Log received request as-is  
3. TACHOnet → TACHOnet: Validate syntax  
4. TACHOnet → TACHOnet: Assign TCNRefId  
5. TACHOnet → TACHOnet: Build sub-requests by Member State code  
6. TACHOnet → DB: Log sub-requests  

**For each sub-request (loop):**  
- TACHOnet → MemberCIA: Send encrypted request  
- MemberCIA → TACHOnet: Return response  

**Process responses (loop):**  
1. TACHOnet → TACHOnet: Decipher response  
2. TACHOnet → DB: Log response as-is  
3. TACHOnet → TACHOnet: Validate syntax  
4. TACHOnet → DB: Store response message (linked to TCNRefId)  

**Completion:**  
- TACHOnet → TACHOnet: Build consolidated response  
- TACHOnet → DB: Log consolidated response  
- TACHOnet → CIA: Send encrypted consolidated response  

**Postconditions:** Consolidated response delivered to CIA; all events logged.

---

**PlantUML:**  
```plantuml
@startuml
title Use Case 02 – Check tachograph card status

actor "Card Issuing Authority" as CIA
participant TACHOnet
participant "Member State CIA" as MemberCIA
database "TACHOnet Tracking Database" as DB

CIA -> TACHOnet : Send request (Card number + Issuing Member State code)
activate TACHOnet

TACHOnet -> TACHOnet : Decipher request
TACHOnet -> DB : Log received request as-is

TACHOnet -> TACHOnet : Validate syntax
TACHOnet -> TACHOnet : Assign TCNRefId

TACHOnet -> TACHOnet : Build new requests by Member State codes
TACHOnet -> DB : Log new requests

loop For each identified Member State
    TACHOnet -> MemberCIA : Send encrypted request
    activate MemberCIA
    MemberCIA -> TACHOnet : Send response
    deactivate MemberCIA
end

loop Process received responses
    TACHOnet -> TACHOnet : Decipher response
    TACHOnet -> DB : Log response as-is
    TACHOnet -> TACHOnet : Validate syntax
    TACHOnet -> DB : Store response message (linked to TCNRefId)
end

alt All responses received or timeout reached
    TACHOnet -> TACHOnet : Build consolidated response
    TACHOnet -> DB : Log consolidated response
    TACHOnet -> CIA : Send encrypted consolidated response
end

deactivate TACHOnet
@enduml